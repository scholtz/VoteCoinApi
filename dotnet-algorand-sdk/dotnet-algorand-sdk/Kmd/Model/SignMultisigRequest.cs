/* 
 * for KMD HTTP API
 *
 * API for KMD (Key Management Daemon)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Kmd.Model
{
    /// <summary>
    /// APIV1POSTMultisigTransactionSignRequest is the request for &#x60;POST /v1/multisig/sign&#x60;
    /// </summary>
    [DataContract]
        public partial class SignMultisigRequest :  IEquatable<SignMultisigRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignMultisigRequest" /> class.
        /// </summary>
        /// <param name="partialMultisig">partialMultisig.</param>
        /// <param name="publicKey">publicKey.</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="transactionType">transactionType.</param>
        /// <param name="walletHandleToken">walletHandleToken.</param>
        /// <param name="walletPassword">walletPassword.</param>
        public SignMultisigRequest(MultisigSig partialMultisig = default(MultisigSig), PublicKey publicKey = default(PublicKey), List<int?> transaction = default(List<int?>), TxType transactionType = default(TxType), string walletHandleToken = default(string), string walletPassword = default(string))
        {
            this.PartialMultisig = partialMultisig;
            this.PublicKey = publicKey;
            this.Transaction = transaction;
            this.TransactionType = transactionType;
            this.WalletHandleToken = walletHandleToken;
            this.WalletPassword = walletPassword;
        }
        
        /// <summary>
        /// Gets or Sets PartialMultisig
        /// </summary>
        [DataMember(Name="partial_multisig", EmitDefaultValue=false)]
        public MultisigSig PartialMultisig { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [DataMember(Name="public_key", EmitDefaultValue=false)]
        public PublicKey PublicKey { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name="transaction", EmitDefaultValue=false)]
        public List<int?> Transaction { get; set; }

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name="transaction_type", EmitDefaultValue=false)]
        public TxType TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets WalletHandleToken
        /// </summary>
        [DataMember(Name="wallet_handle_token", EmitDefaultValue=false)]
        public string WalletHandleToken { get; set; }

        /// <summary>
        /// Gets or Sets WalletPassword
        /// </summary>
        [DataMember(Name="wallet_password", EmitDefaultValue=false)]
        public string WalletPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignMultisigRequest {\n");
            sb.Append("  PartialMultisig: ").Append(PartialMultisig).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  WalletHandleToken: ").Append(WalletHandleToken).Append("\n");
            sb.Append("  WalletPassword: ").Append(WalletPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignMultisigRequest);
        }

        /// <summary>
        /// Returns true if SignMultisigRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SignMultisigRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignMultisigRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PartialMultisig == input.PartialMultisig ||
                    (this.PartialMultisig != null &&
                    this.PartialMultisig.Equals(input.PartialMultisig))
                ) && 
                (
                    this.PublicKey == input.PublicKey ||
                    (this.PublicKey != null &&
                    this.PublicKey.Equals(input.PublicKey))
                ) && 
                (
                    this.Transaction == input.Transaction ||
                    this.Transaction != null &&
                    input.Transaction != null &&
                    this.Transaction.SequenceEqual(input.Transaction)
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.WalletHandleToken == input.WalletHandleToken ||
                    (this.WalletHandleToken != null &&
                    this.WalletHandleToken.Equals(input.WalletHandleToken))
                ) && 
                (
                    this.WalletPassword == input.WalletPassword ||
                    (this.WalletPassword != null &&
                    this.WalletPassword.Equals(input.WalletPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PartialMultisig != null)
                    hashCode = hashCode * 59 + this.PartialMultisig.GetHashCode();
                if (this.PublicKey != null)
                    hashCode = hashCode * 59 + this.PublicKey.GetHashCode();
                if (this.Transaction != null)
                    hashCode = hashCode * 59 + this.Transaction.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.WalletHandleToken != null)
                    hashCode = hashCode * 59 + this.WalletHandleToken.GetHashCode();
                if (this.WalletPassword != null)
                    hashCode = hashCode * 59 + this.WalletPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
