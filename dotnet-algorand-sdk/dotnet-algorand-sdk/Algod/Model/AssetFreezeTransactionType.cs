/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// AssetFreezeTransactionType contains the additional fields for an asset freeze transaction
    /// </summary>
    [DataContract]
        public partial class AssetFreezeTransactionType :  IEquatable<AssetFreezeTransactionType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetFreezeTransactionType" /> class.
        /// </summary>
        /// <param name="acct">Account specifies the account where the asset is being frozen or thawed. (required).</param>
        /// <param name="freeze">NewFreezeStatus specifies the new freeze status. (required).</param>
        /// <param name="id">AssetID is the asset being configured (or empty if creating) (required).</param>
        public AssetFreezeTransactionType(string acct = default(string), bool? freeze = default(bool?), ulong? id = default(ulong?))
        {
            // to ensure "acct" is required (not null)
            if (acct == null)
            {
                throw new InvalidDataException("acct is a required property for AssetFreezeTransactionType and cannot be null");
            }
            else
            {
                this.Acct = acct;
            }
            // to ensure "freeze" is required (not null)
            if (freeze == null)
            {
                throw new InvalidDataException("freeze is a required property for AssetFreezeTransactionType and cannot be null");
            }
            else
            {
                this.Freeze = freeze;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for AssetFreezeTransactionType and cannot be null");
            }
            else
            {
                this.Id = id;
            }
        }
        
        /// <summary>
        /// Account specifies the account where the asset is being frozen or thawed.
        /// </summary>
        /// <value>Account specifies the account where the asset is being frozen or thawed.</value>
        [DataMember(Name="acct", EmitDefaultValue=false)]
        public string Acct { get; set; }

        /// <summary>
        /// NewFreezeStatus specifies the new freeze status.
        /// </summary>
        /// <value>NewFreezeStatus specifies the new freeze status.</value>
        [DataMember(Name="freeze", EmitDefaultValue=false)]
        public bool? Freeze { get; set; }

        /// <summary>
        /// AssetID is the asset being configured (or empty if creating)
        /// </summary>
        /// <value>AssetID is the asset being configured (or empty if creating)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public ulong? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetFreezeTransactionType {\n");
            sb.Append("  Acct: ").Append(Acct).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetFreezeTransactionType);
        }

        /// <summary>
        /// Returns true if AssetFreezeTransactionType instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetFreezeTransactionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetFreezeTransactionType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acct == input.Acct ||
                    (this.Acct != null &&
                    this.Acct.Equals(input.Acct))
                ) && 
                (
                    this.Freeze == input.Freeze ||
                    (this.Freeze != null &&
                    this.Freeze.Equals(input.Freeze))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acct != null)
                    hashCode = hashCode * 59 + this.Acct.GetHashCode();
                if (this.Freeze != null)
                    hashCode = hashCode * 59 + this.Freeze.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
