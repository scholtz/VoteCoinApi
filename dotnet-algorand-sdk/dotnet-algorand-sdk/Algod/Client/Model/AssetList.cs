/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// AssetList contains a list of assets
    /// </summary>
    [DataContract]
        public partial class AssetList :  IEquatable<AssetList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetList" /> class.
        /// </summary>
        /// <param name="assets">AssetList is a list of assets (required).</param>
        public AssetList(List<Asset> assets = default(List<Asset>))
        {
            // to ensure "assets" is required (not null)
            if (assets == null)
            {
                throw new InvalidDataException("assets is a required property for AssetList and cannot be null");
            }
            else
            {
                this.Assets = assets;
            }
        }
        
        /// <summary>
        /// AssetList is a list of assets
        /// </summary>
        /// <value>AssetList is a list of assets</value>
        [DataMember(Name="assets", EmitDefaultValue=false)]
        public List<Asset> Assets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetList {\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetList);
        }

        /// <summary>
        /// Returns true if AssetList instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Assets == input.Assets ||
                    this.Assets != null &&
                    input.Assets != null &&
                    this.Assets.SequenceEqual(input.Assets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assets != null)
                    hashCode = hashCode * 59 + this.Assets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
