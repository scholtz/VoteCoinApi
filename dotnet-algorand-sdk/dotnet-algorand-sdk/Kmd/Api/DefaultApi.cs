/* 
 * for KMD HTTP API
 *
 * API for KMD (Key Management Daemon)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Algorand.Client;
using Algorand.Kmd.Model;

namespace Algorand.Kmd.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a wallet
        /// </summary>
        /// <remarks>
        /// Create a new wallet (collection of keys) with the given parameters.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletResponse</returns>
        APIV1POSTWalletResponse CreateWallet(CreateWalletRequest body);

        /// <summary>
        /// Create a wallet
        /// </summary>
        /// <remarks>
        /// Create a new wallet (collection of keys) with the given parameters.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletResponse</returns>
        ApiResponse<APIV1POSTWalletResponse> CreateWalletWithHttpInfo(CreateWalletRequest body);
        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes the key with the passed public key from the wallet.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1DELETEKeyResponse</returns>
        APIV1DELETEKeyResponse DeleteKey(DeleteKeyRequest body);

        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes the key with the passed public key from the wallet.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1DELETEKeyResponse</returns>
        ApiResponse<APIV1DELETEKeyResponse> DeleteKeyWithHttpInfo(DeleteKeyRequest body);
        /// <summary>
        /// Delete a multisig
        /// </summary>
        /// <remarks>
        /// Deletes multisig preimage information for the passed address from the wallet. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigDeleteResponse</returns>
        APIV1POSTMultisigDeleteResponse DeleteMultisig(DeleteMultisigRequest body);

        /// <summary>
        /// Delete a multisig
        /// </summary>
        /// <remarks>
        /// Deletes multisig preimage information for the passed address from the wallet. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigDeleteResponse</returns>
        ApiResponse<APIV1POSTMultisigDeleteResponse> DeleteMultisigWithHttpInfo(DeleteMultisigRequest body);
        /// <summary>
        /// Export a key
        /// </summary>
        /// <remarks>
        /// Export the secret key associated with the passed public key.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTKeyExportResponse</returns>
        APIV1POSTKeyExportResponse ExportKey(ExportKeyRequest body);

        /// <summary>
        /// Export a key
        /// </summary>
        /// <remarks>
        /// Export the secret key associated with the passed public key.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTKeyExportResponse</returns>
        ApiResponse<APIV1POSTKeyExportResponse> ExportKeyWithHttpInfo(ExportKeyRequest body);
        /// <summary>
        /// Export the master derivation key from a wallet
        /// </summary>
        /// <remarks>
        /// Export the master derivation key from the wallet. This key is a master \&quot;backup\&quot; key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet&#x27;s &#x60;POST /v1/key&#x60; endpoint. This key will not allow you to recover keys imported from other wallets, however. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMasterKeyExportResponse</returns>
        APIV1POSTMasterKeyExportResponse ExportMasterKey(ExportMasterKeyRequest body);

        /// <summary>
        /// Export the master derivation key from a wallet
        /// </summary>
        /// <remarks>
        /// Export the master derivation key from the wallet. This key is a master \&quot;backup\&quot; key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet&#x27;s &#x60;POST /v1/key&#x60; endpoint. This key will not allow you to recover keys imported from other wallets, however. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMasterKeyExportResponse</returns>
        ApiResponse<APIV1POSTMasterKeyExportResponse> ExportMasterKeyWithHttpInfo(ExportMasterKeyRequest body);
        /// <summary>
        /// Export multisig address metadata
        /// </summary>
        /// <remarks>
        /// Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigExportResponse</returns>
        APIV1POSTMultisigExportResponse ExportMultisig(ExportMultisigRequest body);

        /// <summary>
        /// Export multisig address metadata
        /// </summary>
        /// <remarks>
        /// Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigExportResponse</returns>
        ApiResponse<APIV1POSTMultisigExportResponse> ExportMultisigWithHttpInfo(ExportMultisigRequest body);
        /// <summary>
        /// Generate a key
        /// </summary>
        /// <remarks>
        /// Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTKeyResponse</returns>
        APIV1POSTKeyResponse GenerateKey(GenerateKeyRequest body);

        /// <summary>
        /// Generate a key
        /// </summary>
        /// <remarks>
        /// Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTKeyResponse</returns>
        ApiResponse<APIV1POSTKeyResponse> GenerateKeyWithHttpInfo(GenerateKeyRequest body);
        /// <summary>
        /// Get wallet info
        /// </summary>
        /// <remarks>
        /// Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletInfoResponse</returns>
        APIV1POSTWalletInfoResponse GetWalletInfo(WalletInfoRequest body);

        /// <summary>
        /// Get wallet info
        /// </summary>
        /// <remarks>
        /// Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletInfoResponse</returns>
        ApiResponse<APIV1POSTWalletInfoResponse> GetWalletInfoWithHttpInfo(WalletInfoRequest body);
        /// <summary>
        /// Import a key
        /// </summary>
        /// <remarks>
        /// Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet&#x27;s master derivation key. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTKeyImportResponse</returns>
        APIV1POSTKeyImportResponse ImportKey(ImportKeyRequest body);

        /// <summary>
        /// Import a key
        /// </summary>
        /// <remarks>
        /// Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet&#x27;s master derivation key. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTKeyImportResponse</returns>
        ApiResponse<APIV1POSTKeyImportResponse> ImportKeyWithHttpInfo(ImportKeyRequest body);
        /// <summary>
        /// Import a multisig account
        /// </summary>
        /// <remarks>
        /// Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigImportResponse</returns>
        APIV1POSTMultisigImportResponse ImportMultisig(ImportMultisigRequest body);

        /// <summary>
        /// Import a multisig account
        /// </summary>
        /// <remarks>
        /// Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigImportResponse</returns>
        ApiResponse<APIV1POSTMultisigImportResponse> ImportMultisigWithHttpInfo(ImportMultisigRequest body);
        /// <summary>
        /// Initialize a wallet handle token
        /// </summary>
        /// <remarks>
        /// Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can &#x60;POST&#x60; the token to &#x60;/v1/wallet/info&#x60; to see how much time remains until expiration, and renew it with &#x60;/v1/wallet/renew&#x60;. When you&#x27;re done, you can invalidate the token with &#x60;/v1/wallet/release&#x60;. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletInitResponse</returns>
        APIV1POSTWalletInitResponse InitWalletHandleToken(InitWalletHandleTokenRequest body);

        /// <summary>
        /// Initialize a wallet handle token
        /// </summary>
        /// <remarks>
        /// Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can &#x60;POST&#x60; the token to &#x60;/v1/wallet/info&#x60; to see how much time remains until expiration, and renew it with &#x60;/v1/wallet/renew&#x60;. When you&#x27;re done, you can invalidate the token with &#x60;/v1/wallet/release&#x60;. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletInitResponse</returns>
        ApiResponse<APIV1POSTWalletInitResponse> InitWalletHandleTokenWithHttpInfo(InitWalletHandleTokenRequest body);
        /// <summary>
        /// List keys in wallet
        /// </summary>
        /// <remarks>
        /// Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTKeysListResponse</returns>
        APIV1POSTKeysListResponse ListKeysInWallet(ListKeysRequest body);

        /// <summary>
        /// List keys in wallet
        /// </summary>
        /// <remarks>
        /// Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTKeysListResponse</returns>
        ApiResponse<APIV1POSTKeysListResponse> ListKeysInWalletWithHttpInfo(ListKeysRequest body);
        /// <summary>
        /// List multisig accounts
        /// </summary>
        /// <remarks>
        /// Lists all of the multisig accounts whose preimages this wallet stores
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigListResponse</returns>
        APIV1POSTMultisigListResponse ListMultisg(ListMultisigRequest body);

        /// <summary>
        /// List multisig accounts
        /// </summary>
        /// <remarks>
        /// Lists all of the multisig accounts whose preimages this wallet stores
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigListResponse</returns>
        ApiResponse<APIV1POSTMultisigListResponse> ListMultisgWithHttpInfo(ListMultisigRequest body);
        /// <summary>
        /// List wallets
        /// </summary>
        /// <remarks>
        /// Lists all of the wallets that kmd is aware of.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIV1GETWalletsResponse</returns>
        APIV1GETWalletsResponse ListWallets();

        /// <summary>
        /// List wallets
        /// </summary>
        /// <remarks>
        /// Lists all of the wallets that kmd is aware of.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIV1GETWalletsResponse</returns>
        ApiResponse<APIV1GETWalletsResponse> ListWalletsWithHttpInfo();
        /// <summary>
        /// Release a wallet handle token
        /// </summary>
        /// <remarks>
        /// Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletReleaseResponse</returns>
        APIV1POSTWalletReleaseResponse ReleaseWalletHandleToken(ReleaseWalletHandleTokenRequest body);

        /// <summary>
        /// Release a wallet handle token
        /// </summary>
        /// <remarks>
        /// Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletReleaseResponse</returns>
        ApiResponse<APIV1POSTWalletReleaseResponse> ReleaseWalletHandleTokenWithHttpInfo(ReleaseWalletHandleTokenRequest body);
        /// <summary>
        /// Rename a wallet
        /// </summary>
        /// <remarks>
        /// Rename the underlying wallet to something else
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletRenameResponse</returns>
        APIV1POSTWalletRenameResponse RenameWallet(RenameWalletRequest body);

        /// <summary>
        /// Rename a wallet
        /// </summary>
        /// <remarks>
        /// Rename the underlying wallet to something else
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletRenameResponse</returns>
        ApiResponse<APIV1POSTWalletRenameResponse> RenameWalletWithHttpInfo(RenameWalletRequest body);
        /// <summary>
        /// Renew a wallet handle token
        /// </summary>
        /// <remarks>
        /// Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletRenewResponse</returns>
        APIV1POSTWalletRenewResponse RenewWalletHandleToken(RenewWalletHandleTokenRequest body);

        /// <summary>
        /// Renew a wallet handle token
        /// </summary>
        /// <remarks>
        /// Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletRenewResponse</returns>
        ApiResponse<APIV1POSTWalletRenewResponse> RenewWalletHandleTokenWithHttpInfo(RenewWalletHandleTokenRequest body);
        /// <summary>
        /// Sign a multisig transaction
        /// </summary>
        /// <remarks>
        /// Start a multisig signature, or add a signature to a partially completed multisig signature object. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigTransactionSignResponse</returns>
        APIV1POSTMultisigTransactionSignResponse SignMultisigTransaction(SignMultisigRequest body);

        /// <summary>
        /// Sign a multisig transaction
        /// </summary>
        /// <remarks>
        /// Start a multisig signature, or add a signature to a partially completed multisig signature object. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigTransactionSignResponse</returns>
        ApiResponse<APIV1POSTMultisigTransactionSignResponse> SignMultisigTransactionWithHttpInfo(SignMultisigRequest body);
        /// <summary>
        /// Sign a transaction
        /// </summary>
        /// <remarks>
        /// Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTTransactionSignResponse</returns>
        APIV1POSTTransactionSignResponse SignTransaction(SignTransactionRequest body);

        /// <summary>
        /// Sign a transaction
        /// </summary>
        /// <remarks>
        /// Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTTransactionSignResponse</returns>
        ApiResponse<APIV1POSTTransactionSignResponse> SignTransactionWithHttpInfo(SignTransactionRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a wallet
        /// </summary>
        /// <remarks>
        /// Create a new wallet (collection of keys) with the given parameters.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTWalletResponse> CreateWalletAsync(CreateWalletRequest body);

        /// <summary>
        /// Create a wallet
        /// </summary>
        /// <remarks>
        /// Create a new wallet (collection of keys) with the given parameters.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletResponse>> CreateWalletAsyncWithHttpInfo(CreateWalletRequest body);
        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes the key with the passed public key from the wallet.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1DELETEKeyResponse</returns>
        System.Threading.Tasks.Task<APIV1DELETEKeyResponse> DeleteKeyAsync(DeleteKeyRequest body);

        /// <summary>
        /// Delete a key
        /// </summary>
        /// <remarks>
        /// Deletes the key with the passed public key from the wallet.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1DELETEKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1DELETEKeyResponse>> DeleteKeyAsyncWithHttpInfo(DeleteKeyRequest body);
        /// <summary>
        /// Delete a multisig
        /// </summary>
        /// <remarks>
        /// Deletes multisig preimage information for the passed address from the wallet. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigDeleteResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTMultisigDeleteResponse> DeleteMultisigAsync(DeleteMultisigRequest body);

        /// <summary>
        /// Delete a multisig
        /// </summary>
        /// <remarks>
        /// Deletes multisig preimage information for the passed address from the wallet. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigDeleteResponse>> DeleteMultisigAsyncWithHttpInfo(DeleteMultisigRequest body);
        /// <summary>
        /// Export a key
        /// </summary>
        /// <remarks>
        /// Export the secret key associated with the passed public key.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTKeyExportResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTKeyExportResponse> ExportKeyAsync(ExportKeyRequest body);

        /// <summary>
        /// Export a key
        /// </summary>
        /// <remarks>
        /// Export the secret key associated with the passed public key.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTKeyExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTKeyExportResponse>> ExportKeyAsyncWithHttpInfo(ExportKeyRequest body);
        /// <summary>
        /// Export the master derivation key from a wallet
        /// </summary>
        /// <remarks>
        /// Export the master derivation key from the wallet. This key is a master \&quot;backup\&quot; key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet&#x27;s &#x60;POST /v1/key&#x60; endpoint. This key will not allow you to recover keys imported from other wallets, however. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMasterKeyExportResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTMasterKeyExportResponse> ExportMasterKeyAsync(ExportMasterKeyRequest body);

        /// <summary>
        /// Export the master derivation key from a wallet
        /// </summary>
        /// <remarks>
        /// Export the master derivation key from the wallet. This key is a master \&quot;backup\&quot; key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet&#x27;s &#x60;POST /v1/key&#x60; endpoint. This key will not allow you to recover keys imported from other wallets, however. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMasterKeyExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTMasterKeyExportResponse>> ExportMasterKeyAsyncWithHttpInfo(ExportMasterKeyRequest body);
        /// <summary>
        /// Export multisig address metadata
        /// </summary>
        /// <remarks>
        /// Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigExportResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTMultisigExportResponse> ExportMultisigAsync(ExportMultisigRequest body);

        /// <summary>
        /// Export multisig address metadata
        /// </summary>
        /// <remarks>
        /// Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigExportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigExportResponse>> ExportMultisigAsyncWithHttpInfo(ExportMultisigRequest body);
        /// <summary>
        /// Generate a key
        /// </summary>
        /// <remarks>
        /// Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTKeyResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTKeyResponse> GenerateKeyAsync(GenerateKeyRequest body);

        /// <summary>
        /// Generate a key
        /// </summary>
        /// <remarks>
        /// Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTKeyResponse>> GenerateKeyAsyncWithHttpInfo(GenerateKeyRequest body);
        /// <summary>
        /// Get wallet info
        /// </summary>
        /// <remarks>
        /// Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletInfoResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTWalletInfoResponse> GetWalletInfoAsync(WalletInfoRequest body);

        /// <summary>
        /// Get wallet info
        /// </summary>
        /// <remarks>
        /// Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletInfoResponse>> GetWalletInfoAsyncWithHttpInfo(WalletInfoRequest body);
        /// <summary>
        /// Import a key
        /// </summary>
        /// <remarks>
        /// Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet&#x27;s master derivation key. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTKeyImportResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTKeyImportResponse> ImportKeyAsync(ImportKeyRequest body);

        /// <summary>
        /// Import a key
        /// </summary>
        /// <remarks>
        /// Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet&#x27;s master derivation key. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTKeyImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTKeyImportResponse>> ImportKeyAsyncWithHttpInfo(ImportKeyRequest body);
        /// <summary>
        /// Import a multisig account
        /// </summary>
        /// <remarks>
        /// Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigImportResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTMultisigImportResponse> ImportMultisigAsync(ImportMultisigRequest body);

        /// <summary>
        /// Import a multisig account
        /// </summary>
        /// <remarks>
        /// Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigImportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigImportResponse>> ImportMultisigAsyncWithHttpInfo(ImportMultisigRequest body);
        /// <summary>
        /// Initialize a wallet handle token
        /// </summary>
        /// <remarks>
        /// Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can &#x60;POST&#x60; the token to &#x60;/v1/wallet/info&#x60; to see how much time remains until expiration, and renew it with &#x60;/v1/wallet/renew&#x60;. When you&#x27;re done, you can invalidate the token with &#x60;/v1/wallet/release&#x60;. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletInitResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTWalletInitResponse> InitWalletHandleTokenAsync(InitWalletHandleTokenRequest body);

        /// <summary>
        /// Initialize a wallet handle token
        /// </summary>
        /// <remarks>
        /// Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can &#x60;POST&#x60; the token to &#x60;/v1/wallet/info&#x60; to see how much time remains until expiration, and renew it with &#x60;/v1/wallet/renew&#x60;. When you&#x27;re done, you can invalidate the token with &#x60;/v1/wallet/release&#x60;. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletInitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletInitResponse>> InitWalletHandleTokenAsyncWithHttpInfo(InitWalletHandleTokenRequest body);
        /// <summary>
        /// List keys in wallet
        /// </summary>
        /// <remarks>
        /// Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTKeysListResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTKeysListResponse> ListKeysInWalletAsync(ListKeysRequest body);

        /// <summary>
        /// List keys in wallet
        /// </summary>
        /// <remarks>
        /// Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTKeysListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTKeysListResponse>> ListKeysInWalletAsyncWithHttpInfo(ListKeysRequest body);
        /// <summary>
        /// List multisig accounts
        /// </summary>
        /// <remarks>
        /// Lists all of the multisig accounts whose preimages this wallet stores
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigListResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTMultisigListResponse> ListMultisgAsync(ListMultisigRequest body);

        /// <summary>
        /// List multisig accounts
        /// </summary>
        /// <remarks>
        /// Lists all of the multisig accounts whose preimages this wallet stores
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigListResponse>> ListMultisgAsyncWithHttpInfo(ListMultisigRequest body);
        /// <summary>
        /// List wallets
        /// </summary>
        /// <remarks>
        /// Lists all of the wallets that kmd is aware of.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIV1GETWalletsResponse</returns>
        System.Threading.Tasks.Task<APIV1GETWalletsResponse> ListWalletsAsync();

        /// <summary>
        /// List wallets
        /// </summary>
        /// <remarks>
        /// Lists all of the wallets that kmd is aware of.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIV1GETWalletsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1GETWalletsResponse>> ListWalletsAsyncWithHttpInfo();
        /// <summary>
        /// Release a wallet handle token
        /// </summary>
        /// <remarks>
        /// Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletReleaseResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTWalletReleaseResponse> ReleaseWalletHandleTokenAsync(ReleaseWalletHandleTokenRequest body);

        /// <summary>
        /// Release a wallet handle token
        /// </summary>
        /// <remarks>
        /// Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletReleaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletReleaseResponse>> ReleaseWalletHandleTokenAsyncWithHttpInfo(ReleaseWalletHandleTokenRequest body);
        /// <summary>
        /// Rename a wallet
        /// </summary>
        /// <remarks>
        /// Rename the underlying wallet to something else
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletRenameResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTWalletRenameResponse> RenameWalletAsync(RenameWalletRequest body);

        /// <summary>
        /// Rename a wallet
        /// </summary>
        /// <remarks>
        /// Rename the underlying wallet to something else
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletRenameResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletRenameResponse>> RenameWalletAsyncWithHttpInfo(RenameWalletRequest body);
        /// <summary>
        /// Renew a wallet handle token
        /// </summary>
        /// <remarks>
        /// Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletRenewResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTWalletRenewResponse> RenewWalletHandleTokenAsync(RenewWalletHandleTokenRequest body);

        /// <summary>
        /// Renew a wallet handle token
        /// </summary>
        /// <remarks>
        /// Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletRenewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletRenewResponse>> RenewWalletHandleTokenAsyncWithHttpInfo(RenewWalletHandleTokenRequest body);
        /// <summary>
        /// Sign a multisig transaction
        /// </summary>
        /// <remarks>
        /// Start a multisig signature, or add a signature to a partially completed multisig signature object. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigTransactionSignResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTMultisigTransactionSignResponse> SignMultisigTransactionAsync(SignMultisigRequest body);

        /// <summary>
        /// Sign a multisig transaction
        /// </summary>
        /// <remarks>
        /// Start a multisig signature, or add a signature to a partially completed multisig signature object. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigTransactionSignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigTransactionSignResponse>> SignMultisigTransactionAsyncWithHttpInfo(SignMultisigRequest body);
        /// <summary>
        /// Sign a transaction
        /// </summary>
        /// <remarks>
        /// Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTTransactionSignResponse</returns>
        System.Threading.Tasks.Task<APIV1POSTTransactionSignResponse> SignTransactionAsync(SignTransactionRequest body);

        /// <summary>
        /// Sign a transaction
        /// </summary>
        /// <remarks>
        /// Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction. 
        /// </remarks>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTTransactionSignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<APIV1POSTTransactionSignResponse>> SignTransactionAsyncWithHttpInfo(SignTransactionRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Algorand.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Algorand.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Algorand.Client.Configuration.Default;

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Algorand.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Algorand.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Algorand.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Algorand.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a wallet Create a new wallet (collection of keys) with the given parameters.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletResponse</returns>
        public APIV1POSTWalletResponse CreateWallet(CreateWalletRequest body)
        {
            ApiResponse<APIV1POSTWalletResponse> localVarResponse = CreateWalletWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a wallet Create a new wallet (collection of keys) with the given parameters.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletResponse</returns>
        public ApiResponse<APIV1POSTWalletResponse> CreateWalletWithHttpInfo(CreateWalletRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CreateWallet");

            var localVarPath = "/v1/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletResponse)));
        }

        /// <summary>
        /// Create a wallet Create a new wallet (collection of keys) with the given parameters.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTWalletResponse> CreateWalletAsync(CreateWalletRequest body)
        {
            ApiResponse<APIV1POSTWalletResponse> localVarResponse = await CreateWalletAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create a wallet Create a new wallet (collection of keys) with the given parameters.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletResponse>> CreateWalletAsyncWithHttpInfo(CreateWalletRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->CreateWallet");

            var localVarPath = "/v1/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletResponse)));
        }

        /// <summary>
        /// Delete a key Deletes the key with the passed public key from the wallet.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1DELETEKeyResponse</returns>
        public APIV1DELETEKeyResponse DeleteKey(DeleteKeyRequest body)
        {
            ApiResponse<APIV1DELETEKeyResponse> localVarResponse = DeleteKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a key Deletes the key with the passed public key from the wallet.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1DELETEKeyResponse</returns>
        public ApiResponse<APIV1DELETEKeyResponse> DeleteKeyWithHttpInfo(DeleteKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeleteKey");

            var localVarPath = "/v1/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1DELETEKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1DELETEKeyResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1DELETEKeyResponse)));
        }

        /// <summary>
        /// Delete a key Deletes the key with the passed public key from the wallet.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1DELETEKeyResponse</returns>
        public async System.Threading.Tasks.Task<APIV1DELETEKeyResponse> DeleteKeyAsync(DeleteKeyRequest body)
        {
            ApiResponse<APIV1DELETEKeyResponse> localVarResponse = await DeleteKeyAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a key Deletes the key with the passed public key from the wallet.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1DELETEKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1DELETEKeyResponse>> DeleteKeyAsyncWithHttpInfo(DeleteKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeleteKey");

            var localVarPath = "/v1/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1DELETEKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1DELETEKeyResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1DELETEKeyResponse)));
        }

        /// <summary>
        /// Delete a multisig Deletes multisig preimage information for the passed address from the wallet. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigDeleteResponse</returns>
        public APIV1POSTMultisigDeleteResponse DeleteMultisig(DeleteMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigDeleteResponse> localVarResponse = DeleteMultisigWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a multisig Deletes multisig preimage information for the passed address from the wallet. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigDeleteResponse</returns>
        public ApiResponse<APIV1POSTMultisigDeleteResponse> DeleteMultisigWithHttpInfo(DeleteMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeleteMultisig");

            var localVarPath = "/v1/multisig/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigDeleteResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigDeleteResponse)));
        }

        /// <summary>
        /// Delete a multisig Deletes multisig preimage information for the passed address from the wallet. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigDeleteResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTMultisigDeleteResponse> DeleteMultisigAsync(DeleteMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigDeleteResponse> localVarResponse = await DeleteMultisigAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a multisig Deletes multisig preimage information for the passed address from the wallet. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigDeleteResponse>> DeleteMultisigAsyncWithHttpInfo(DeleteMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeleteMultisig");

            var localVarPath = "/v1/multisig/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigDeleteResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigDeleteResponse)));
        }

        /// <summary>
        /// Export a key Export the secret key associated with the passed public key.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTKeyExportResponse</returns>
        public APIV1POSTKeyExportResponse ExportKey(ExportKeyRequest body)
        {
            ApiResponse<APIV1POSTKeyExportResponse> localVarResponse = ExportKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a key Export the secret key associated with the passed public key.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTKeyExportResponse</returns>
        public ApiResponse<APIV1POSTKeyExportResponse> ExportKeyWithHttpInfo(ExportKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ExportKey");

            var localVarPath = "/v1/key/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTKeyExportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTKeyExportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTKeyExportResponse)));
        }

        /// <summary>
        /// Export a key Export the secret key associated with the passed public key.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTKeyExportResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTKeyExportResponse> ExportKeyAsync(ExportKeyRequest body)
        {
            ApiResponse<APIV1POSTKeyExportResponse> localVarResponse = await ExportKeyAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Export a key Export the secret key associated with the passed public key.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTKeyExportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTKeyExportResponse>> ExportKeyAsyncWithHttpInfo(ExportKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ExportKey");

            var localVarPath = "/v1/key/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTKeyExportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTKeyExportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTKeyExportResponse)));
        }

        /// <summary>
        /// Export the master derivation key from a wallet Export the master derivation key from the wallet. This key is a master \&quot;backup\&quot; key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet&#x27;s &#x60;POST /v1/key&#x60; endpoint. This key will not allow you to recover keys imported from other wallets, however. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMasterKeyExportResponse</returns>
        public APIV1POSTMasterKeyExportResponse ExportMasterKey(ExportMasterKeyRequest body)
        {
            ApiResponse<APIV1POSTMasterKeyExportResponse> localVarResponse = ExportMasterKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export the master derivation key from a wallet Export the master derivation key from the wallet. This key is a master \&quot;backup\&quot; key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet&#x27;s &#x60;POST /v1/key&#x60; endpoint. This key will not allow you to recover keys imported from other wallets, however. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMasterKeyExportResponse</returns>
        public ApiResponse<APIV1POSTMasterKeyExportResponse> ExportMasterKeyWithHttpInfo(ExportMasterKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ExportMasterKey");

            var localVarPath = "/v1/master_key/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportMasterKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMasterKeyExportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMasterKeyExportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMasterKeyExportResponse)));
        }

        /// <summary>
        /// Export the master derivation key from a wallet Export the master derivation key from the wallet. This key is a master \&quot;backup\&quot; key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet&#x27;s &#x60;POST /v1/key&#x60; endpoint. This key will not allow you to recover keys imported from other wallets, however. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMasterKeyExportResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTMasterKeyExportResponse> ExportMasterKeyAsync(ExportMasterKeyRequest body)
        {
            ApiResponse<APIV1POSTMasterKeyExportResponse> localVarResponse = await ExportMasterKeyAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Export the master derivation key from a wallet Export the master derivation key from the wallet. This key is a master \&quot;backup\&quot; key for the underlying wallet. With it, you can regenerate all of the wallets that have been generated with this wallet&#x27;s &#x60;POST /v1/key&#x60; endpoint. This key will not allow you to recover keys imported from other wallets, however. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMasterKeyExportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTMasterKeyExportResponse>> ExportMasterKeyAsyncWithHttpInfo(ExportMasterKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ExportMasterKey");

            var localVarPath = "/v1/master_key/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportMasterKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMasterKeyExportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMasterKeyExportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMasterKeyExportResponse)));
        }

        /// <summary>
        /// Export multisig address metadata Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigExportResponse</returns>
        public APIV1POSTMultisigExportResponse ExportMultisig(ExportMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigExportResponse> localVarResponse = ExportMultisigWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export multisig address metadata Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigExportResponse</returns>
        public ApiResponse<APIV1POSTMultisigExportResponse> ExportMultisigWithHttpInfo(ExportMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ExportMultisig");

            var localVarPath = "/v1/multisig/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigExportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigExportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigExportResponse)));
        }

        /// <summary>
        /// Export multisig address metadata Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigExportResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTMultisigExportResponse> ExportMultisigAsync(ExportMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigExportResponse> localVarResponse = await ExportMultisigAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Export multisig address metadata Given a multisig address whose preimage this wallet stores, returns the information used to generate the address, including public keys, threshold, and multisig version. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigExportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigExportResponse>> ExportMultisigAsyncWithHttpInfo(ExportMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ExportMultisig");

            var localVarPath = "/v1/multisig/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigExportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigExportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigExportResponse)));
        }

        /// <summary>
        /// Generate a key Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTKeyResponse</returns>
        public APIV1POSTKeyResponse GenerateKey(GenerateKeyRequest body)
        {
            ApiResponse<APIV1POSTKeyResponse> localVarResponse = GenerateKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a key Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTKeyResponse</returns>
        public ApiResponse<APIV1POSTKeyResponse> GenerateKeyWithHttpInfo(GenerateKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->GenerateKey");

            var localVarPath = "/v1/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTKeyResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTKeyResponse)));
        }

        /// <summary>
        /// Generate a key Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTKeyResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTKeyResponse> GenerateKeyAsync(GenerateKeyRequest body)
        {
            ApiResponse<APIV1POSTKeyResponse> localVarResponse = await GenerateKeyAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a key Generates the next key in the deterministic key sequence (as determined by the master derivation key) and adds it to the wallet, returning the public key. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTKeyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTKeyResponse>> GenerateKeyAsyncWithHttpInfo(GenerateKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->GenerateKey");

            var localVarPath = "/v1/key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTKeyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTKeyResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTKeyResponse)));
        }

        /// <summary>
        /// Get wallet info Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletInfoResponse</returns>
        public APIV1POSTWalletInfoResponse GetWalletInfo(WalletInfoRequest body)
        {
            ApiResponse<APIV1POSTWalletInfoResponse> localVarResponse = GetWalletInfoWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get wallet info Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletInfoResponse</returns>
        public ApiResponse<APIV1POSTWalletInfoResponse> GetWalletInfoWithHttpInfo(WalletInfoRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->GetWalletInfo");

            var localVarPath = "/v1/wallet/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletInfoResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletInfoResponse)));
        }

        /// <summary>
        /// Get wallet info Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletInfoResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTWalletInfoResponse> GetWalletInfoAsync(WalletInfoRequest body)
        {
            ApiResponse<APIV1POSTWalletInfoResponse> localVarResponse = await GetWalletInfoAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get wallet info Returns information about the wallet associated with the passed wallet handle token. Additionally returns expiration information about the token itself. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletInfoResponse>> GetWalletInfoAsyncWithHttpInfo(WalletInfoRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->GetWalletInfo");

            var localVarPath = "/v1/wallet/info";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletInfoResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletInfoResponse)));
        }

        /// <summary>
        /// Import a key Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet&#x27;s master derivation key. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTKeyImportResponse</returns>
        public APIV1POSTKeyImportResponse ImportKey(ImportKeyRequest body)
        {
            ApiResponse<APIV1POSTKeyImportResponse> localVarResponse = ImportKeyWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import a key Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet&#x27;s master derivation key. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTKeyImportResponse</returns>
        public ApiResponse<APIV1POSTKeyImportResponse> ImportKeyWithHttpInfo(ImportKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ImportKey");

            var localVarPath = "/v1/key/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTKeyImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTKeyImportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTKeyImportResponse)));
        }

        /// <summary>
        /// Import a key Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet&#x27;s master derivation key. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTKeyImportResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTKeyImportResponse> ImportKeyAsync(ImportKeyRequest body)
        {
            ApiResponse<APIV1POSTKeyImportResponse> localVarResponse = await ImportKeyAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Import a key Import an externally generated key into the wallet. Note that if you wish to back up the imported key, you must do so by backing up the entire wallet database, because imported keys were not derived from the wallet&#x27;s master derivation key. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTKeyImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTKeyImportResponse>> ImportKeyAsyncWithHttpInfo(ImportKeyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ImportKey");

            var localVarPath = "/v1/key/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTKeyImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTKeyImportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTKeyImportResponse)));
        }

        /// <summary>
        /// Import a multisig account Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigImportResponse</returns>
        public APIV1POSTMultisigImportResponse ImportMultisig(ImportMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigImportResponse> localVarResponse = ImportMultisigWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import a multisig account Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigImportResponse</returns>
        public ApiResponse<APIV1POSTMultisigImportResponse> ImportMultisigWithHttpInfo(ImportMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ImportMultisig");

            var localVarPath = "/v1/multisig/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigImportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigImportResponse)));
        }

        /// <summary>
        /// Import a multisig account Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigImportResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTMultisigImportResponse> ImportMultisigAsync(ImportMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigImportResponse> localVarResponse = await ImportMultisigAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Import a multisig account Generates a multisig account from the passed public keys array and multisig metadata, and stores all of this in the wallet. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigImportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigImportResponse>> ImportMultisigAsyncWithHttpInfo(ImportMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ImportMultisig");

            var localVarPath = "/v1/multisig/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigImportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigImportResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigImportResponse)));
        }

        /// <summary>
        /// Initialize a wallet handle token Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can &#x60;POST&#x60; the token to &#x60;/v1/wallet/info&#x60; to see how much time remains until expiration, and renew it with &#x60;/v1/wallet/renew&#x60;. When you&#x27;re done, you can invalidate the token with &#x60;/v1/wallet/release&#x60;. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletInitResponse</returns>
        public APIV1POSTWalletInitResponse InitWalletHandleToken(InitWalletHandleTokenRequest body)
        {
            ApiResponse<APIV1POSTWalletInitResponse> localVarResponse = InitWalletHandleTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize a wallet handle token Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can &#x60;POST&#x60; the token to &#x60;/v1/wallet/info&#x60; to see how much time remains until expiration, and renew it with &#x60;/v1/wallet/renew&#x60;. When you&#x27;re done, you can invalidate the token with &#x60;/v1/wallet/release&#x60;. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletInitResponse</returns>
        public ApiResponse<APIV1POSTWalletInitResponse> InitWalletHandleTokenWithHttpInfo(InitWalletHandleTokenRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->InitWalletHandleToken");

            var localVarPath = "/v1/wallet/init";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitWalletHandleToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletInitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletInitResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletInitResponse)));
        }

        /// <summary>
        /// Initialize a wallet handle token Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can &#x60;POST&#x60; the token to &#x60;/v1/wallet/info&#x60; to see how much time remains until expiration, and renew it with &#x60;/v1/wallet/renew&#x60;. When you&#x27;re done, you can invalidate the token with &#x60;/v1/wallet/release&#x60;. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletInitResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTWalletInitResponse> InitWalletHandleTokenAsync(InitWalletHandleTokenRequest body)
        {
            ApiResponse<APIV1POSTWalletInitResponse> localVarResponse = await InitWalletHandleTokenAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Initialize a wallet handle token Unlock the wallet and return a wallet handle token that can be used for subsequent operations. These tokens expire periodically and must be renewed. You can &#x60;POST&#x60; the token to &#x60;/v1/wallet/info&#x60; to see how much time remains until expiration, and renew it with &#x60;/v1/wallet/renew&#x60;. When you&#x27;re done, you can invalidate the token with &#x60;/v1/wallet/release&#x60;. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletInitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletInitResponse>> InitWalletHandleTokenAsyncWithHttpInfo(InitWalletHandleTokenRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->InitWalletHandleToken");

            var localVarPath = "/v1/wallet/init";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitWalletHandleToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletInitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletInitResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletInitResponse)));
        }

        /// <summary>
        /// List keys in wallet Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTKeysListResponse</returns>
        public APIV1POSTKeysListResponse ListKeysInWallet(ListKeysRequest body)
        {
            ApiResponse<APIV1POSTKeysListResponse> localVarResponse = ListKeysInWalletWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List keys in wallet Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTKeysListResponse</returns>
        public ApiResponse<APIV1POSTKeysListResponse> ListKeysInWalletWithHttpInfo(ListKeysRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ListKeysInWallet");

            var localVarPath = "/v1/keys/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListKeysInWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTKeysListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTKeysListResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTKeysListResponse)));
        }

        /// <summary>
        /// List keys in wallet Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTKeysListResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTKeysListResponse> ListKeysInWalletAsync(ListKeysRequest body)
        {
            ApiResponse<APIV1POSTKeysListResponse> localVarResponse = await ListKeysInWalletAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// List keys in wallet Lists all of the public keys in this wallet. All of them have a stored private key.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTKeysListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTKeysListResponse>> ListKeysInWalletAsyncWithHttpInfo(ListKeysRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ListKeysInWallet");

            var localVarPath = "/v1/keys/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListKeysInWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTKeysListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTKeysListResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTKeysListResponse)));
        }

        /// <summary>
        /// List multisig accounts Lists all of the multisig accounts whose preimages this wallet stores
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigListResponse</returns>
        public APIV1POSTMultisigListResponse ListMultisg(ListMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigListResponse> localVarResponse = ListMultisgWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List multisig accounts Lists all of the multisig accounts whose preimages this wallet stores
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigListResponse</returns>
        public ApiResponse<APIV1POSTMultisigListResponse> ListMultisgWithHttpInfo(ListMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ListMultisg");

            var localVarPath = "/v1/multisig/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultisg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigListResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigListResponse)));
        }

        /// <summary>
        /// List multisig accounts Lists all of the multisig accounts whose preimages this wallet stores
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigListResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTMultisigListResponse> ListMultisgAsync(ListMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigListResponse> localVarResponse = await ListMultisgAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// List multisig accounts Lists all of the multisig accounts whose preimages this wallet stores
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigListResponse>> ListMultisgAsyncWithHttpInfo(ListMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ListMultisg");

            var localVarPath = "/v1/multisig/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultisg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigListResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigListResponse)));
        }

        /// <summary>
        /// List wallets Lists all of the wallets that kmd is aware of.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <returns>APIV1GETWalletsResponse</returns>
        public APIV1GETWalletsResponse ListWallets()
        {
            ApiResponse<APIV1GETWalletsResponse> localVarResponse = ListWalletsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List wallets Lists all of the wallets that kmd is aware of.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of APIV1GETWalletsResponse</returns>
        public ApiResponse<APIV1GETWalletsResponse> ListWalletsWithHttpInfo()
        {

            var localVarPath = "/v1/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListWallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1GETWalletsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1GETWalletsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1GETWalletsResponse)));
        }

        /// <summary>
        /// List wallets Lists all of the wallets that kmd is aware of.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of APIV1GETWalletsResponse</returns>
        public async System.Threading.Tasks.Task<APIV1GETWalletsResponse> ListWalletsAsync()
        {
            ApiResponse<APIV1GETWalletsResponse> localVarResponse = await ListWalletsAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// List wallets Lists all of the wallets that kmd is aware of.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (APIV1GETWalletsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1GETWalletsResponse>> ListWalletsAsyncWithHttpInfo()
        {

            var localVarPath = "/v1/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListWallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1GETWalletsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1GETWalletsResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1GETWalletsResponse)));
        }

        /// <summary>
        /// Release a wallet handle token Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletReleaseResponse</returns>
        public APIV1POSTWalletReleaseResponse ReleaseWalletHandleToken(ReleaseWalletHandleTokenRequest body)
        {
            ApiResponse<APIV1POSTWalletReleaseResponse> localVarResponse = ReleaseWalletHandleTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Release a wallet handle token Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletReleaseResponse</returns>
        public ApiResponse<APIV1POSTWalletReleaseResponse> ReleaseWalletHandleTokenWithHttpInfo(ReleaseWalletHandleTokenRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ReleaseWalletHandleToken");

            var localVarPath = "/v1/wallet/release";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleaseWalletHandleToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletReleaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletReleaseResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletReleaseResponse)));
        }

        /// <summary>
        /// Release a wallet handle token Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletReleaseResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTWalletReleaseResponse> ReleaseWalletHandleTokenAsync(ReleaseWalletHandleTokenRequest body)
        {
            ApiResponse<APIV1POSTWalletReleaseResponse> localVarResponse = await ReleaseWalletHandleTokenAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Release a wallet handle token Invalidate the passed wallet handle token, making it invalid for use in subsequent requests.
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletReleaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletReleaseResponse>> ReleaseWalletHandleTokenAsyncWithHttpInfo(ReleaseWalletHandleTokenRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ReleaseWalletHandleToken");

            var localVarPath = "/v1/wallet/release";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReleaseWalletHandleToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletReleaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletReleaseResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletReleaseResponse)));
        }

        /// <summary>
        /// Rename a wallet Rename the underlying wallet to something else
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletRenameResponse</returns>
        public APIV1POSTWalletRenameResponse RenameWallet(RenameWalletRequest body)
        {
            ApiResponse<APIV1POSTWalletRenameResponse> localVarResponse = RenameWalletWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a wallet Rename the underlying wallet to something else
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletRenameResponse</returns>
        public ApiResponse<APIV1POSTWalletRenameResponse> RenameWalletWithHttpInfo(RenameWalletRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RenameWallet");

            var localVarPath = "/v1/wallet/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletRenameResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletRenameResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletRenameResponse)));
        }

        /// <summary>
        /// Rename a wallet Rename the underlying wallet to something else
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletRenameResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTWalletRenameResponse> RenameWalletAsync(RenameWalletRequest body)
        {
            ApiResponse<APIV1POSTWalletRenameResponse> localVarResponse = await RenameWalletAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Rename a wallet Rename the underlying wallet to something else
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletRenameResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletRenameResponse>> RenameWalletAsyncWithHttpInfo(RenameWalletRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RenameWallet");

            var localVarPath = "/v1/wallet/rename";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletRenameResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletRenameResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletRenameResponse)));
        }

        /// <summary>
        /// Renew a wallet handle token Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTWalletRenewResponse</returns>
        public APIV1POSTWalletRenewResponse RenewWalletHandleToken(RenewWalletHandleTokenRequest body)
        {
            ApiResponse<APIV1POSTWalletRenewResponse> localVarResponse = RenewWalletHandleTokenWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Renew a wallet handle token Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTWalletRenewResponse</returns>
        public ApiResponse<APIV1POSTWalletRenewResponse> RenewWalletHandleTokenWithHttpInfo(RenewWalletHandleTokenRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RenewWalletHandleToken");

            var localVarPath = "/v1/wallet/renew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenewWalletHandleToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletRenewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletRenewResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletRenewResponse)));
        }

        /// <summary>
        /// Renew a wallet handle token Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTWalletRenewResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTWalletRenewResponse> RenewWalletHandleTokenAsync(RenewWalletHandleTokenRequest body)
        {
            ApiResponse<APIV1POSTWalletRenewResponse> localVarResponse = await RenewWalletHandleTokenAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Renew a wallet handle token Renew a wallet handle token, increasing its expiration duration to its initial value
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTWalletRenewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTWalletRenewResponse>> RenewWalletHandleTokenAsyncWithHttpInfo(RenewWalletHandleTokenRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RenewWalletHandleToken");

            var localVarPath = "/v1/wallet/renew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenewWalletHandleToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTWalletRenewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTWalletRenewResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTWalletRenewResponse)));
        }

        /// <summary>
        /// Sign a multisig transaction Start a multisig signature, or add a signature to a partially completed multisig signature object. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTMultisigTransactionSignResponse</returns>
        public APIV1POSTMultisigTransactionSignResponse SignMultisigTransaction(SignMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigTransactionSignResponse> localVarResponse = SignMultisigTransactionWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign a multisig transaction Start a multisig signature, or add a signature to a partially completed multisig signature object. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTMultisigTransactionSignResponse</returns>
        public ApiResponse<APIV1POSTMultisigTransactionSignResponse> SignMultisigTransactionWithHttpInfo(SignMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SignMultisigTransaction");

            var localVarPath = "/v1/multisig/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignMultisigTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigTransactionSignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigTransactionSignResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigTransactionSignResponse)));
        }

        /// <summary>
        /// Sign a multisig transaction Start a multisig signature, or add a signature to a partially completed multisig signature object. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTMultisigTransactionSignResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTMultisigTransactionSignResponse> SignMultisigTransactionAsync(SignMultisigRequest body)
        {
            ApiResponse<APIV1POSTMultisigTransactionSignResponse> localVarResponse = await SignMultisigTransactionAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Sign a multisig transaction Start a multisig signature, or add a signature to a partially completed multisig signature object. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTMultisigTransactionSignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTMultisigTransactionSignResponse>> SignMultisigTransactionAsyncWithHttpInfo(SignMultisigRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SignMultisigTransaction");

            var localVarPath = "/v1/multisig/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignMultisigTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTMultisigTransactionSignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTMultisigTransactionSignResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTMultisigTransactionSignResponse)));
        }

        /// <summary>
        /// Sign a transaction Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>APIV1POSTTransactionSignResponse</returns>
        public APIV1POSTTransactionSignResponse SignTransaction(SignTransactionRequest body)
        {
            ApiResponse<APIV1POSTTransactionSignResponse> localVarResponse = SignTransactionWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign a transaction Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of APIV1POSTTransactionSignResponse</returns>
        public ApiResponse<APIV1POSTTransactionSignResponse> SignTransactionWithHttpInfo(SignTransactionRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SignTransaction");

            var localVarPath = "/v1/transaction/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTTransactionSignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTTransactionSignResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTTransactionSignResponse)));
        }

        /// <summary>
        /// Sign a transaction Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of APIV1POSTTransactionSignResponse</returns>
        public async System.Threading.Tasks.Task<APIV1POSTTransactionSignResponse> SignTransactionAsync(SignTransactionRequest body)
        {
            ApiResponse<APIV1POSTTransactionSignResponse> localVarResponse = await SignTransactionAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Sign a transaction Signs the passed transaction with a key from the wallet, determined by the sender encoded in the transaction. 
        /// </summary>
        /// <exception cref="Algorand.Kmd.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (APIV1POSTTransactionSignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<APIV1POSTTransactionSignResponse>> SignTransactionAsyncWithHttpInfo(SignTransactionRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SignTransaction");

            var localVarPath = "/v1/transaction/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token")))
            {
                localVarHeaderParams["X-KMD-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-KMD-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<APIV1POSTTransactionSignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (APIV1POSTTransactionSignResponse)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(APIV1POSTTransactionSignResponse)));
        }

    }
}
