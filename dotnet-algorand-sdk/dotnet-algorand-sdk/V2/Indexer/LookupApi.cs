//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Algorand.V2.Indexer
{
    using System = global::System;
    using Algorand.V2.Indexer.Model;


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ILookupApi
    {
        /// <param name="account_id">account string</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> AccountsAsync(string account_id, ulong? round, bool? include_all);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="account_id">account string</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> AccountsAsync(string account_id, ulong? round, bool? include_all, System.Threading.CancellationToken cancellationToken);

        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="note_prefix">Specifies a prefix which must be contained in the note field.</param>
        /// <param name="sig_type">SigType filters just results using the specified type of signature:
        /// <br/>* sig - Standard
        /// <br/>* msig - MultiSig
        /// <br/>* lsig - LogicSig</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="asset_id">Asset ID</param>
        /// <param name="before_time">Include results before the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="after_time">Include results after the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="account_id">account string</param>
        /// <param name="rekey_to">Include results which include the rekey-to field.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> TransactionsGetAsync(int? limit, string next, string note_prefix, TxType? tx_type, SigType? sig_type, string txid, ulong? round, ulong? min_round, ulong? max_round, int? asset_id, System.DateTimeOffset? before_time, System.DateTimeOffset? after_time, ulong? currency_greater_than, ulong? currency_less_than, string account_id, bool? rekey_to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="note_prefix">Specifies a prefix which must be contained in the note field.</param>
        /// <param name="sig_type">SigType filters just results using the specified type of signature:
        /// <br/>* sig - Standard
        /// <br/>* msig - MultiSig
        /// <br/>* lsig - LogicSig</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="asset_id">Asset ID</param>
        /// <param name="before_time">Include results before the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="after_time">Include results after the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="account_id">account string</param>
        /// <param name="rekey_to">Include results which include the rekey-to field.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> TransactionsGetAsync(int? limit, string next, string note_prefix, TxType? tx_type, SigType? sig_type, string txid, ulong? round, ulong? min_round, ulong? max_round, int? asset_id, System.DateTimeOffset? before_time, System.DateTimeOffset? after_time, ulong? currency_greater_than, ulong? currency_less_than, string account_id, bool? rekey_to, System.Threading.CancellationToken cancellationToken);

        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> ApplicationsAsync(int application_id, bool? include_all);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> ApplicationsAsync(int application_id, bool? include_all, System.Threading.CancellationToken cancellationToken);

        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="sender_address">Only include transactions with this sender address.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> LogsAsync(int application_id, int? limit, string next, string txid, ulong? min_round, ulong? max_round, string sender_address);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="sender_address">Only include transactions with this sender address.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> LogsAsync(int application_id, int? limit, string next, string txid, ulong? min_round, ulong? max_round, string sender_address, System.Threading.CancellationToken cancellationToken);

        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> AssetsAsync(int asset_id, bool? include_all);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> AssetsAsync(int asset_id, bool? include_all, System.Threading.CancellationToken cancellationToken);

        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> BalancesAsync(bool? include_all, int? limit, string next, ulong? round, ulong? currency_greater_than, ulong? currency_less_than, int asset_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> BalancesAsync(bool? include_all, int? limit, string next, ulong? round, ulong? currency_greater_than, ulong? currency_less_than, int asset_id, System.Threading.CancellationToken cancellationToken);

        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="note_prefix">Specifies a prefix which must be contained in the note field.</param>
        /// <param name="sig_type">SigType filters just results using the specified type of signature:
        /// <br/>* sig - Standard
        /// <br/>* msig - MultiSig
        /// <br/>* lsig - LogicSig</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="before_time">Include results before the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="after_time">Include results after the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields.</param>
        /// <param name="address_role">Combine with the address parameter to define what type of address to search for.</param>
        /// <param name="exclude_close_to">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.</param>
        /// <param name="rekey_to">Include results which include the rekey-to field.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> TransactionsGetAsync(int? limit, string next, string note_prefix, TxType? tx_type, SigType? sig_type, string txid, ulong? round, ulong? min_round, ulong? max_round, System.DateTimeOffset? before_time, System.DateTimeOffset? after_time, ulong? currency_greater_than, ulong? currency_less_than, string address, AddressRole? address_role, bool? exclude_close_to, int asset_id, bool? rekey_to);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="note_prefix">Specifies a prefix which must be contained in the note field.</param>
        /// <param name="sig_type">SigType filters just results using the specified type of signature:
        /// <br/>* sig - Standard
        /// <br/>* msig - MultiSig
        /// <br/>* lsig - LogicSig</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="before_time">Include results before the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="after_time">Include results after the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields.</param>
        /// <param name="address_role">Combine with the address parameter to define what type of address to search for.</param>
        /// <param name="exclude_close_to">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.</param>
        /// <param name="rekey_to">Include results which include the rekey-to field.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> TransactionsGetAsync(int? limit, string next, string note_prefix, TxType? tx_type, SigType? sig_type, string txid, ulong? round, ulong? min_round, ulong? max_round, System.DateTimeOffset? before_time, System.DateTimeOffset? after_time, ulong? currency_greater_than, ulong? currency_less_than, string address, AddressRole? address_role, bool? exclude_close_to, int asset_id, bool? rekey_to, System.Threading.CancellationToken cancellationToken);

        /// <param name="round_number">Round number</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Block> BlocksAsync(int round_number);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="round_number">Round number</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Block> BlocksAsync(int round_number, System.Threading.CancellationToken cancellationToken);

        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> TransactionsGetAsync(string txid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> TransactionsGetAsync(string txid, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.14.5.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class LookupApi : ILookupApi
    {
        private string _baseUrl = "https://example.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public LookupApi(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);


        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <param name="account_id">account string</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response6> AccountsAsync(string account_id, ulong? round, bool? include_all)
        {
            return AccountsAsync(account_id, round, include_all, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="account_id">account string</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response6> AccountsAsync(string account_id, ulong? round, bool? include_all, System.Threading.CancellationToken cancellationToken)
        {
            if (account_id == null)
                throw new System.ArgumentNullException("account_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/accounts/{account-id}?");
            urlBuilder_.Replace("{account-id}", System.Uri.EscapeDataString(ConvertToString(account_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (include_all != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include-all") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include_all, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="note_prefix">Specifies a prefix which must be contained in the note field.</param>
        /// <param name="sig_type">SigType filters just results using the specified type of signature:
        /// <br/>* sig - Standard
        /// <br/>* msig - MultiSig
        /// <br/>* lsig - LogicSig</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="asset_id">Asset ID</param>
        /// <param name="before_time">Include results before the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="after_time">Include results after the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="account_id">account string</param>
        /// <param name="rekey_to">Include results which include the rekey-to field.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response4> TransactionsGetAsync(int? limit, string next, string note_prefix, TxType? tx_type, SigType? sig_type, string txid, ulong? round, ulong? min_round, ulong? max_round, int? asset_id, System.DateTimeOffset? before_time, System.DateTimeOffset? after_time, ulong? currency_greater_than, ulong? currency_less_than, string account_id, bool? rekey_to)
        {
            return TransactionsGetAsync(limit, next, note_prefix, tx_type, sig_type, txid, round, min_round, max_round, asset_id, before_time, after_time, currency_greater_than, currency_less_than, account_id, rekey_to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="note_prefix">Specifies a prefix which must be contained in the note field.</param>
        /// <param name="sig_type">SigType filters just results using the specified type of signature:
        /// <br/>* sig - Standard
        /// <br/>* msig - MultiSig
        /// <br/>* lsig - LogicSig</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="asset_id">Asset ID</param>
        /// <param name="before_time">Include results before the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="after_time">Include results after the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="account_id">account string</param>
        /// <param name="rekey_to">Include results which include the rekey-to field.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> TransactionsGetAsync(int? limit, string next, string note_prefix, TxType? tx_type, SigType? sig_type, string txid, ulong? round, ulong? min_round, ulong? max_round, int? asset_id, System.DateTimeOffset? before_time, System.DateTimeOffset? after_time, ulong? currency_greater_than, ulong? currency_less_than, string account_id, bool? rekey_to, System.Threading.CancellationToken cancellationToken)
        {
            if (account_id == null)
                throw new System.ArgumentNullException("account_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/accounts/{account-id}/transactions?");
            urlBuilder_.Replace("{account-id}", System.Uri.EscapeDataString(ConvertToString(account_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (next != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("next") + "=").Append(System.Uri.EscapeDataString(ConvertToString(next, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (note_prefix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("note-prefix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(note_prefix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tx_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tx-type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tx_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sig_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sig-type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sig_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (txid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("txid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(txid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (min_round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("min-round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(min_round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (max_round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("max-round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(max_round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (asset_id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("asset-id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(asset_id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before_time != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before-time") + "=").Append(System.Uri.EscapeDataString(before_time.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (after_time != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after-time") + "=").Append(System.Uri.EscapeDataString(after_time.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currency_greater_than != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency-greater-than") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency_greater_than, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currency_less_than != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency-less-than") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency_less_than, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rekey_to != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rekey-to") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rekey_to, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response7> ApplicationsAsync(int application_id, bool? include_all)
        {
            return ApplicationsAsync(application_id, include_all, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response7> ApplicationsAsync(int application_id, bool? include_all, System.Threading.CancellationToken cancellationToken)
        {
            if (application_id == null)
                throw new System.ArgumentNullException("application_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/applications/{application-id}?");
            urlBuilder_.Replace("{application-id}", System.Uri.EscapeDataString(ConvertToString(application_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (include_all != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include-all") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include_all, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="sender_address">Only include transactions with this sender address.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response8> LogsAsync(int application_id, int? limit, string next, string txid, ulong? min_round, ulong? max_round, string sender_address)
        {
            return LogsAsync(application_id, limit, next, txid, min_round, max_round, sender_address, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="sender_address">Only include transactions with this sender address.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response8> LogsAsync(int application_id, int? limit, string next, string txid, ulong? min_round, ulong? max_round, string sender_address, System.Threading.CancellationToken cancellationToken)
        {
            if (application_id == null)
                throw new System.ArgumentNullException("application_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/applications/{application-id}/logs?");
            urlBuilder_.Replace("{application-id}", System.Uri.EscapeDataString(ConvertToString(application_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (next != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("next") + "=").Append(System.Uri.EscapeDataString(ConvertToString(next, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (txid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("txid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(txid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (min_round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("min-round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(min_round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (max_round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("max-round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(max_round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sender_address != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sender-address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sender_address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response9> AssetsAsync(int asset_id, bool? include_all)
        {
            return AssetsAsync(asset_id, include_all, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response9> AssetsAsync(int asset_id, bool? include_all, System.Threading.CancellationToken cancellationToken)
        {
            if (asset_id == null)
                throw new System.ArgumentNullException("asset_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/assets/{asset-id}?");
            urlBuilder_.Replace("{asset-id}", System.Uri.EscapeDataString(ConvertToString(asset_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (include_all != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include-all") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include_all, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response10> BalancesAsync(bool? include_all, int? limit, string next, ulong? round, ulong? currency_greater_than, ulong? currency_less_than, int asset_id)
        {
            return BalancesAsync(include_all, limit, next, round, currency_greater_than, currency_less_than, asset_id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="include_all">Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response10> BalancesAsync(bool? include_all, int? limit, string next, ulong? round, ulong? currency_greater_than, ulong? currency_less_than, int asset_id, System.Threading.CancellationToken cancellationToken)
        {
            if (asset_id == null)
                throw new System.ArgumentNullException("asset_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/assets/{asset-id}/balances?");
            urlBuilder_.Replace("{asset-id}", System.Uri.EscapeDataString(ConvertToString(asset_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (include_all != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("include-all") + "=").Append(System.Uri.EscapeDataString(ConvertToString(include_all, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (next != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("next") + "=").Append(System.Uri.EscapeDataString(ConvertToString(next, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currency_greater_than != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency-greater-than") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency_greater_than, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currency_less_than != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency-less-than") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency_less_than, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="note_prefix">Specifies a prefix which must be contained in the note field.</param>
        /// <param name="sig_type">SigType filters just results using the specified type of signature:
        /// <br/>* sig - Standard
        /// <br/>* msig - MultiSig
        /// <br/>* lsig - LogicSig</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="before_time">Include results before the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="after_time">Include results after the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields.</param>
        /// <param name="address_role">Combine with the address parameter to define what type of address to search for.</param>
        /// <param name="exclude_close_to">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.</param>
        /// <param name="rekey_to">Include results which include the rekey-to field.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response4> TransactionsGetAsync(int? limit, string next, string note_prefix, TxType? tx_type, SigType? sig_type, string txid, ulong? round, ulong? min_round, ulong? max_round, System.DateTimeOffset? before_time, System.DateTimeOffset? after_time, ulong? currency_greater_than, ulong? currency_less_than, string address, AddressRole? address_role, bool? exclude_close_to, int asset_id, bool? rekey_to)
        {
            return TransactionsGetAsync(limit, next, note_prefix, tx_type, sig_type, txid, round, min_round, max_round, before_time, after_time, currency_greater_than, currency_less_than, address, address_role, exclude_close_to, asset_id, rekey_to, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="limit">Maximum number of results to return. There could be additional pages even if the limit is not reached.</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results.</param>
        /// <param name="note_prefix">Specifies a prefix which must be contained in the note field.</param>
        /// <param name="sig_type">SigType filters just results using the specified type of signature:
        /// <br/>* sig - Standard
        /// <br/>* msig - MultiSig
        /// <br/>* lsig - LogicSig</param>
        /// <param name="txid">Lookup the specific transaction by ID.</param>
        /// <param name="round">Include results for the specified round.</param>
        /// <param name="min_round">Include results at or after the specified min-round.</param>
        /// <param name="max_round">Include results at or before the specified max-round.</param>
        /// <param name="before_time">Include results before the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="after_time">Include results after the given time. Must be an RFC 3339 formatted string.</param>
        /// <param name="currency_greater_than">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="currency_less_than">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields.</param>
        /// <param name="address_role">Combine with the address parameter to define what type of address to search for.</param>
        /// <param name="exclude_close_to">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.</param>
        /// <param name="rekey_to">Include results which include the rekey-to field.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> TransactionsGetAsync(int? limit, string next, string note_prefix, TxType? tx_type, SigType? sig_type, string txid, ulong? round, ulong? min_round, ulong? max_round, System.DateTimeOffset? before_time, System.DateTimeOffset? after_time, ulong? currency_greater_than, ulong? currency_less_than, string address, AddressRole? address_role, bool? exclude_close_to, int asset_id, bool? rekey_to, System.Threading.CancellationToken cancellationToken)
        {
            if (asset_id == null)
                throw new System.ArgumentNullException("asset_id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/assets/{asset-id}/transactions?");
            urlBuilder_.Replace("{asset-id}", System.Uri.EscapeDataString(ConvertToString(asset_id, System.Globalization.CultureInfo.InvariantCulture)));
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (next != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("next") + "=").Append(System.Uri.EscapeDataString(ConvertToString(next, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (note_prefix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("note-prefix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(note_prefix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tx_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tx-type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tx_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sig_type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sig-type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sig_type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (txid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("txid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(txid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (min_round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("min-round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(min_round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (max_round != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("max-round") + "=").Append(System.Uri.EscapeDataString(ConvertToString(max_round, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (before_time != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("before-time") + "=").Append(System.Uri.EscapeDataString(before_time.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (after_time != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("after-time") + "=").Append(System.Uri.EscapeDataString(after_time.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currency_greater_than != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency-greater-than") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency_greater_than, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currency_less_than != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("currency-less-than") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currency_less_than, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (address != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("address") + "=").Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (address_role != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("address-role") + "=").Append(System.Uri.EscapeDataString(ConvertToString(address_role, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exclude_close_to != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("exclude-close-to") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exclude_close_to, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rekey_to != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rekey-to") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rekey_to, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="round_number">Round number</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Block> BlocksAsync(int round_number)
        {
            return BlocksAsync(round_number, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="round_number">Round number</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Block> BlocksAsync(int round_number, System.Threading.CancellationToken cancellationToken)
        {
            if (round_number == null)
                throw new System.ArgumentNullException("round_number");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/blocks/{round-number}");
            urlBuilder_.Replace("{round-number}", System.Uri.EscapeDataString(ConvertToString(round_number, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Block>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response11> TransactionsGetAsync(string txid)
        {
            return TransactionsGetAsync(txid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>(empty)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response11> TransactionsGetAsync(string txid, System.Threading.CancellationToken cancellationToken)
        {
            if (txid == null)
                throw new System.ArgumentNullException("txid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/transactions/{txid}");
            urlBuilder_.Replace("{txid}", System.Uri.EscapeDataString(ConvertToString(txid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response5>("Response for errors", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    var text = await response.Content.ReadAsStringAsync();
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(text, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, string.Empty);
                    /*
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }/**/
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }
}