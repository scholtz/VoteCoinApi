/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// Transaction contains all fields common to all transactions and serves as an envelope to all transactions type
    /// </summary>
    [DataContract]
    public partial class Transaction : IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="curcfg">curcfg.</param>
        /// <param name="curfrz">curfrz.</param>
        /// <param name="curxfer">curxfer.</param>
        /// <param name="fee">Fee is the transaction fee (required).</param>
        /// <param name="firstRound">FirstRound indicates the first valid round for this transaction (required).</param>
        /// <param name="from">From is the sender&#x27;s address (required).</param>
        /// <param name="fromrewards">FromRewards is the amount of pending rewards applied to the From account as part of this transaction..</param>
        /// <param name="genesisID">Genesis ID (required).</param>
        /// <param name="genesishashb64">Genesis hash (required).</param>
        /// <param name="group">Group.</param>
        /// <param name="keyreg">keyreg.</param>
        /// <param name="lastRound">LastRound indicates the last valid round for this transaction (required).</param>
        /// <param name="noteb64">Note is a free form data.</param>
        /// <param name="payment">payment.</param>
        /// <param name="poolerror">PoolError indicates the transaction was evicted from this node&#x27;s transaction pool (if non-empty).  A non-empty PoolError does not guarantee that the transaction will never be committed; other nodes may not have evicted the transaction and may attempt to commit it in the future..</param>
        /// <param name="round">ConfirmedRound indicates the block number this transaction appeared in.</param>
        /// <param name="tx">TxID is the transaction ID (required).</param>
        /// <param name="txresults">txresults.</param>
        /// <param name="type">Type is the transaction type (required).</param>
        public Transaction(AssetConfigTransactionType curcfg = default(AssetConfigTransactionType), AssetFreezeTransactionType curfrz = default(AssetFreezeTransactionType), AssetTransferTransactionType curxfer = default(AssetTransferTransactionType), ulong? fee = default(ulong?), ulong? firstRound = default(ulong?), string from = default(string), ulong? fromrewards = default(ulong?), string genesisID = default(string), string genesishashb64 = default(string), string group = default(string), KeyregTransactionType keyreg = default(KeyregTransactionType), ulong? lastRound = default(ulong?), string noteb64 = default(string), PaymentTransactionType payment = default(PaymentTransactionType), string poolerror = default(string), ulong? round = default(ulong?), string tx = default(string), TransactionResults txresults = default(TransactionResults), string type = default(string))
        {
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new InvalidDataException("fee is a required property for Transaction and cannot be null");
            }
            else
            {
                this.Fee = fee;
            }
            // to ensure "firstRound" is required (not null)
            if (firstRound == null)
            {
                throw new InvalidDataException("firstRound is a required property for Transaction and cannot be null");
            }
            else
            {
                this.FirstRound = firstRound;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for Transaction and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "genesisID" is required (not null)
            if (genesisID == null)
            {
                throw new InvalidDataException("genesisID is a required property for Transaction and cannot be null");
            }
            else
            {
                this.GenesisID = genesisID;
            }
            // to ensure "genesishashb64" is required (not null)
            if (genesishashb64 == null)
            {
                throw new InvalidDataException("genesishashb64 is a required property for Transaction and cannot be null");
            }
            else
            {
                this.Genesishashb64 = genesishashb64;
            }
            // to ensure "lastRound" is required (not null)
            if (lastRound == null)
            {
                throw new InvalidDataException("lastRound is a required property for Transaction and cannot be null");
            }
            else
            {
                this.LastRound = lastRound;
            }
            // to ensure "tx" is required (not null)
            if (tx == null)
            {
                throw new InvalidDataException("tx is a required property for Transaction and cannot be null");
            }
            else
            {
                this.Tx = tx;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Transaction and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Curcfg = curcfg;
            this.Curfrz = curfrz;
            this.Curxfer = curxfer;
            this.Fromrewards = fromrewards;
            this.Group = group;
            this.Keyreg = keyreg;
            this.Noteb64 = noteb64;
            this.Payment = payment;
            this.Poolerror = poolerror;
            this.Round = round;
            this.Txresults = txresults;
        }

        /// <summary>
        /// Gets or Sets Curcfg
        /// </summary>
        [DataMember(Name = "curcfg", EmitDefaultValue = false)]
        public AssetConfigTransactionType Curcfg { get; set; }

        /// <summary>
        /// Gets or Sets Curfrz
        /// </summary>
        [DataMember(Name = "curfrz", EmitDefaultValue = false)]
        public AssetFreezeTransactionType Curfrz { get; set; }

        /// <summary>
        /// Gets or Sets Curxfer
        /// </summary>
        [DataMember(Name = "curxfer", EmitDefaultValue = false)]
        public AssetTransferTransactionType Curxfer { get; set; }

        /// <summary>
        /// Fee is the transaction fee
        /// </summary>
        /// <value>Fee is the transaction fee</value>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public ulong? Fee { get; set; }

        /// <summary>
        /// FirstRound indicates the first valid round for this transaction
        /// </summary>
        /// <value>FirstRound indicates the first valid round for this transaction</value>
        [DataMember(Name = "first-round", EmitDefaultValue = false)]
        public ulong? FirstRound { get; set; }

        /// <summary>
        /// From is the sender&#x27;s address
        /// </summary>
        /// <value>From is the sender&#x27;s address</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// FromRewards is the amount of pending rewards applied to the From account as part of this transaction.
        /// </summary>
        /// <value>FromRewards is the amount of pending rewards applied to the From account as part of this transaction.</value>
        [DataMember(Name = "fromrewards", EmitDefaultValue = false)]
        public ulong? Fromrewards { get; set; }

        /// <summary>
        /// Genesis ID
        /// </summary>
        /// <value>Genesis ID</value>
        [DataMember(Name = "genesisID", EmitDefaultValue = false)]
        public string GenesisID { get; set; }

        /// <summary>
        /// Genesis hash
        /// </summary>
        /// <value>Genesis hash</value>
        [DataMember(Name = "genesishashb64", EmitDefaultValue = false)]
        public string Genesishashb64 { get; set; }

        /// <summary>
        /// Group
        /// </summary>
        /// <value>Group</value>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Keyreg
        /// </summary>
        [DataMember(Name = "keyreg", EmitDefaultValue = false)]
        public KeyregTransactionType Keyreg { get; set; }

        /// <summary>
        /// LastRound indicates the last valid round for this transaction
        /// </summary>
        /// <value>LastRound indicates the last valid round for this transaction</value>
        [DataMember(Name = "last-round", EmitDefaultValue = false)]
        public ulong? LastRound { get; set; }

        /// <summary>
        /// Note is a free form data
        /// </summary>
        /// <value>Note is a free form data</value>
        [DataMember(Name = "noteb64", EmitDefaultValue = false)]
        public string Noteb64 { get; set; }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name = "payment", EmitDefaultValue = false)]
        public PaymentTransactionType Payment { get; set; }

        /// <summary>
        /// PoolError indicates the transaction was evicted from this node&#x27;s transaction pool (if non-empty).  A non-empty PoolError does not guarantee that the transaction will never be committed; other nodes may not have evicted the transaction and may attempt to commit it in the future.
        /// </summary>
        /// <value>PoolError indicates the transaction was evicted from this node&#x27;s transaction pool (if non-empty).  A non-empty PoolError does not guarantee that the transaction will never be committed; other nodes may not have evicted the transaction and may attempt to commit it in the future.</value>
        [DataMember(Name = "poolerror", EmitDefaultValue = false)]
        public string Poolerror { get; set; }

        /// <summary>
        /// ConfirmedRound indicates the block number this transaction appeared in
        /// </summary>
        /// <value>ConfirmedRound indicates the block number this transaction appeared in</value>
        [DataMember(Name = "round", EmitDefaultValue = false)]
        public ulong? Round { get; set; }

        /// <summary>
        /// TxID is the transaction ID
        /// </summary>
        /// <value>TxID is the transaction ID</value>
        [DataMember(Name = "tx", EmitDefaultValue = false)]
        public string Tx { get; set; }

        /// <summary>
        /// Gets or Sets Txresults
        /// </summary>
        [DataMember(Name = "txresults", EmitDefaultValue = false)]
        public TransactionResults Txresults { get; set; }

        /// <summary>
        /// Type is the transaction type
        /// </summary>
        /// <value>Type is the transaction type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  Curcfg: ").Append(Curcfg).Append("\n");
            sb.Append("  Curfrz: ").Append(Curfrz).Append("\n");
            sb.Append("  Curxfer: ").Append(Curxfer).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  FirstRound: ").Append(FirstRound).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Fromrewards: ").Append(Fromrewards).Append("\n");
            sb.Append("  GenesisID: ").Append(GenesisID).Append("\n");
            sb.Append("  Genesishashb64: ").Append(Genesishashb64).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Keyreg: ").Append(Keyreg).Append("\n");
            sb.Append("  LastRound: ").Append(LastRound).Append("\n");
            sb.Append("  Noteb64: ").Append(Noteb64).Append("\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  Poolerror: ").Append(Poolerror).Append("\n");
            sb.Append("  Round: ").Append(Round).Append("\n");
            sb.Append("  Tx: ").Append(Tx).Append("\n");
            sb.Append("  Txresults: ").Append(Txresults).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Curcfg == input.Curcfg ||
                    (this.Curcfg != null &&
                    this.Curcfg.Equals(input.Curcfg))
                ) &&
                (
                    this.Curfrz == input.Curfrz ||
                    (this.Curfrz != null &&
                    this.Curfrz.Equals(input.Curfrz))
                ) &&
                (
                    this.Curxfer == input.Curxfer ||
                    (this.Curxfer != null &&
                    this.Curxfer.Equals(input.Curxfer))
                ) &&
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) &&
                (
                    this.FirstRound == input.FirstRound ||
                    (this.FirstRound != null &&
                    this.FirstRound.Equals(input.FirstRound))
                ) &&
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) &&
                (
                    this.Fromrewards == input.Fromrewards ||
                    (this.Fromrewards != null &&
                    this.Fromrewards.Equals(input.Fromrewards))
                ) &&
                (
                    this.GenesisID == input.GenesisID ||
                    (this.GenesisID != null &&
                    this.GenesisID.Equals(input.GenesisID))
                ) &&
                (
                    this.Genesishashb64 == input.Genesishashb64 ||
                    (this.Genesishashb64 != null &&
                    this.Genesishashb64.Equals(input.Genesishashb64))
                ) &&
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) &&
                (
                    this.Keyreg == input.Keyreg ||
                    (this.Keyreg != null &&
                    this.Keyreg.Equals(input.Keyreg))
                ) &&
                (
                    this.LastRound == input.LastRound ||
                    (this.LastRound != null &&
                    this.LastRound.Equals(input.LastRound))
                ) &&
                (
                    this.Noteb64 == input.Noteb64 ||
                    (this.Noteb64 != null &&
                    this.Noteb64.Equals(input.Noteb64))
                ) &&
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                ) &&
                (
                    this.Poolerror == input.Poolerror ||
                    (this.Poolerror != null &&
                    this.Poolerror.Equals(input.Poolerror))
                ) &&
                (
                    this.Round == input.Round ||
                    (this.Round != null &&
                    this.Round.Equals(input.Round))
                ) &&
                (
                    this.Tx == input.Tx ||
                    (this.Tx != null &&
                    this.Tx.Equals(input.Tx))
                ) &&
                (
                    this.Txresults == input.Txresults ||
                    (this.Txresults != null &&
                    this.Txresults.Equals(input.Txresults))
                ) &&
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Curcfg != null)
                    hashCode = hashCode * 59 + this.Curcfg.GetHashCode();
                if (this.Curfrz != null)
                    hashCode = hashCode * 59 + this.Curfrz.GetHashCode();
                if (this.Curxfer != null)
                    hashCode = hashCode * 59 + this.Curxfer.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.FirstRound != null)
                    hashCode = hashCode * 59 + this.FirstRound.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Fromrewards != null)
                    hashCode = hashCode * 59 + this.Fromrewards.GetHashCode();
                if (this.GenesisID != null)
                    hashCode = hashCode * 59 + this.GenesisID.GetHashCode();
                if (this.Genesishashb64 != null)
                    hashCode = hashCode * 59 + this.Genesishashb64.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Keyreg != null)
                    hashCode = hashCode * 59 + this.Keyreg.GetHashCode();
                if (this.LastRound != null)
                    hashCode = hashCode * 59 + this.LastRound.GetHashCode();
                if (this.Noteb64 != null)
                    hashCode = hashCode * 59 + this.Noteb64.GetHashCode();
                if (this.Payment != null)
                    hashCode = hashCode * 59 + this.Payment.GetHashCode();
                if (this.Poolerror != null)
                    hashCode = hashCode * 59 + this.Poolerror.GetHashCode();
                if (this.Round != null)
                    hashCode = hashCode * 59 + this.Round.GetHashCode();
                if (this.Tx != null)
                    hashCode = hashCode * 59 + this.Tx.GetHashCode();
                if (this.Txresults != null)
                    hashCode = hashCode * 59 + this.Txresults.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
