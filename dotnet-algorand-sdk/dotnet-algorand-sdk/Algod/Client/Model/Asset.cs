/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// Asset specifies both the unique identifier and the parameters for an asset
    /// </summary>
    [DataContract]
    public partial class Asset : IEquatable<Asset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Asset" /> class.
        /// </summary>
        /// <param name="assetIndex">AssetIndex is the unique asset identifier (required).</param>
        /// <param name="assetParams">assetParams (required).</param>
        public Asset(ulong? assetIndex = default(ulong?), AssetParams assetParams = default(AssetParams))
        {
            // to ensure "assetIndex" is required (not null)
            if (assetIndex == null)
            {
                throw new InvalidDataException("assetIndex is a required property for Asset and cannot be null");
            }
            else
            {
                this.AssetIndex = assetIndex;
            }
            // to ensure "assetParams" is required (not null)
            if (assetParams == null)
            {
                throw new InvalidDataException("assetParams is a required property for Asset and cannot be null");
            }
            else
            {
                this.AssetParams = assetParams;
            }
        }

        /// <summary>
        /// AssetIndex is the unique asset identifier
        /// </summary>
        /// <value>AssetIndex is the unique asset identifier</value>
        [DataMember(Name = "AssetIndex", EmitDefaultValue = false)]
        public ulong? AssetIndex { get; set; }

        /// <summary>
        /// Gets or Sets AssetParams
        /// </summary>
        [DataMember(Name = "AssetParams", EmitDefaultValue = false)]
        public AssetParams AssetParams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Asset {\n");
            sb.Append("  AssetIndex: ").Append(AssetIndex).Append("\n");
            sb.Append("  AssetParams: ").Append(AssetParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Asset);
        }

        /// <summary>
        /// Returns true if Asset instances are equal
        /// </summary>
        /// <param name="input">Instance of Asset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Asset input)
        {
            if (input == null)
                return false;

            return
                (
                    this.AssetIndex == input.AssetIndex ||
                    (this.AssetIndex != null &&
                    this.AssetIndex.Equals(input.AssetIndex))
                ) &&
                (
                    this.AssetParams == input.AssetParams ||
                    (this.AssetParams != null &&
                    this.AssetParams.Equals(input.AssetParams))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetIndex != null)
                    hashCode = hashCode * 59 + this.AssetIndex.GetHashCode();
                if (this.AssetParams != null)
                    hashCode = hashCode * 59 + this.AssetParams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
