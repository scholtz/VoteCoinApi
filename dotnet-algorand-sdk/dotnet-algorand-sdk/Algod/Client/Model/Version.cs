/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// Note that we annotate this as a model so that legacy clients can directly import a swagger generated Version model.
    /// </summary>
    [DataContract]
        public partial class Version :  IEquatable<Version>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Version" /> class.
        /// </summary>
        /// <param name="build">build (required).</param>
        /// <param name="genesisHashB64">genesisHashB64 (required).</param>
        /// <param name="genesisId">genesisId (required).</param>
        /// <param name="versions">versions (required).</param>
        public Version(BuildVersion build = default(BuildVersion), string genesisHashB64 = default(string), string genesisId = default(string), List<string> versions = default(List<string>))
        {
            // to ensure "build" is required (not null)
            if (build == null)
            {
                throw new InvalidDataException("build is a required property for Version and cannot be null");
            }
            else
            {
                this.Build = build;
            }
            // to ensure "genesisHashB64" is required (not null)
            if (genesisHashB64 == null)
            {
                throw new InvalidDataException("genesisHashB64 is a required property for Version and cannot be null");
            }
            else
            {
                this.GenesisHashB64 = genesisHashB64;
            }
            // to ensure "genesisId" is required (not null)
            if (genesisId == null)
            {
                throw new InvalidDataException("genesisId is a required property for Version and cannot be null");
            }
            else
            {
                this.GenesisId = genesisId;
            }
            // to ensure "versions" is required (not null)
            if (versions == null)
            {
                throw new InvalidDataException("versions is a required property for Version and cannot be null");
            }
            else
            {
                this.Versions = versions;
            }
        }
        
        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public BuildVersion Build { get; set; }

        /// <summary>
        /// Gets or Sets GenesisHashB64
        /// </summary>
        [DataMember(Name="genesis_hash_b64", EmitDefaultValue=false)]
        public string GenesisHashB64 { get; set; }

        /// <summary>
        /// Gets or Sets GenesisId
        /// </summary>
        [DataMember(Name="genesis_id", EmitDefaultValue=false)]
        public string GenesisId { get; set; }

        /// <summary>
        /// Gets or Sets Versions
        /// </summary>
        [DataMember(Name="versions", EmitDefaultValue=false)]
        public List<string> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Version {\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  GenesisHashB64: ").Append(GenesisHashB64).Append("\n");
            sb.Append("  GenesisId: ").Append(GenesisId).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Version);
        }

        /// <summary>
        /// Returns true if Version instances are equal
        /// </summary>
        /// <param name="input">Instance of Version to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Version input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.GenesisHashB64 == input.GenesisHashB64 ||
                    (this.GenesisHashB64 != null &&
                    this.GenesisHashB64.Equals(input.GenesisHashB64))
                ) && 
                (
                    this.GenesisId == input.GenesisId ||
                    (this.GenesisId != null &&
                    this.GenesisId.Equals(input.GenesisId))
                ) && 
                (
                    this.Versions == input.Versions ||
                    this.Versions != null &&
                    input.Versions != null &&
                    this.Versions.SequenceEqual(input.Versions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.GenesisHashB64 != null)
                    hashCode = hashCode * 59 + this.GenesisHashB64.GetHashCode();
                if (this.GenesisId != null)
                    hashCode = hashCode * 59 + this.GenesisId.GetHashCode();
                if (this.Versions != null)
                    hashCode = hashCode * 59 + this.Versions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
