/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// Participation Description
    /// </summary>
    [DataContract]
        public partial class Participation :  IEquatable<Participation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Participation" /> class.
        /// </summary>
        /// <param name="partpkb64">ParticipationPK is the root participation public key (if any) currently registered for this round (required).</param>
        /// <param name="votefst">VoteFirst is the first round for which this participation is valid. (required).</param>
        /// <param name="votekd">VoteKeyDilution is the number of subkeys in for each batch of participation keys. (required).</param>
        /// <param name="votelst">VoteLast is the last round for which this participation is valid. (required).</param>
        /// <param name="vrfpkb64">VRFPK is the selection public key (if any) currently registered for this round (required).</param>
        public Participation(string partpkb64 = default(string), ulong? votefst = default(ulong?), ulong? votekd = default(ulong?), ulong? votelst = default(ulong?), string vrfpkb64 = default(string))
        {
            // to ensure "partpkb64" is required (not null)
            if (partpkb64 == null)
            {
                throw new InvalidDataException("partpkb64 is a required property for Participation and cannot be null");
            }
            else
            {
                this.Partpkb64 = partpkb64;
            }
            // to ensure "votefst" is required (not null)
            if (votefst == null)
            {
                throw new InvalidDataException("votefst is a required property for Participation and cannot be null");
            }
            else
            {
                this.Votefst = votefst;
            }
            // to ensure "votekd" is required (not null)
            if (votekd == null)
            {
                throw new InvalidDataException("votekd is a required property for Participation and cannot be null");
            }
            else
            {
                this.Votekd = votekd;
            }
            // to ensure "votelst" is required (not null)
            if (votelst == null)
            {
                throw new InvalidDataException("votelst is a required property for Participation and cannot be null");
            }
            else
            {
                this.Votelst = votelst;
            }
            // to ensure "vrfpkb64" is required (not null)
            if (vrfpkb64 == null)
            {
                throw new InvalidDataException("vrfpkb64 is a required property for Participation and cannot be null");
            }
            else
            {
                this.Vrfpkb64 = vrfpkb64;
            }
        }
        
        /// <summary>
        /// ParticipationPK is the root participation public key (if any) currently registered for this round
        /// </summary>
        /// <value>ParticipationPK is the root participation public key (if any) currently registered for this round</value>
        [DataMember(Name="partpkb64", EmitDefaultValue=false)]
        public string Partpkb64 { get; set; }

        /// <summary>
        /// VoteFirst is the first round for which this participation is valid.
        /// </summary>
        /// <value>VoteFirst is the first round for which this participation is valid.</value>
        [DataMember(Name="votefst", EmitDefaultValue=false)]
        public ulong? Votefst { get; set; }

        /// <summary>
        /// VoteKeyDilution is the number of subkeys in for each batch of participation keys.
        /// </summary>
        /// <value>VoteKeyDilution is the number of subkeys in for each batch of participation keys.</value>
        [DataMember(Name="votekd", EmitDefaultValue=false)]
        public ulong? Votekd { get; set; }

        /// <summary>
        /// VoteLast is the last round for which this participation is valid.
        /// </summary>
        /// <value>VoteLast is the last round for which this participation is valid.</value>
        [DataMember(Name="votelst", EmitDefaultValue=false)]
        public ulong? Votelst { get; set; }

        /// <summary>
        /// VRFPK is the selection public key (if any) currently registered for this round
        /// </summary>
        /// <value>VRFPK is the selection public key (if any) currently registered for this round</value>
        [DataMember(Name="vrfpkb64", EmitDefaultValue=false)]
        public string Vrfpkb64 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Participation {\n");
            sb.Append("  Partpkb64: ").Append(Partpkb64).Append("\n");
            sb.Append("  Votefst: ").Append(Votefst).Append("\n");
            sb.Append("  Votekd: ").Append(Votekd).Append("\n");
            sb.Append("  Votelst: ").Append(Votelst).Append("\n");
            sb.Append("  Vrfpkb64: ").Append(Vrfpkb64).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Participation);
        }

        /// <summary>
        /// Returns true if Participation instances are equal
        /// </summary>
        /// <param name="input">Instance of Participation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Participation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Partpkb64 == input.Partpkb64 ||
                    (this.Partpkb64 != null &&
                    this.Partpkb64.Equals(input.Partpkb64))
                ) && 
                (
                    this.Votefst == input.Votefst ||
                    (this.Votefst != null &&
                    this.Votefst.Equals(input.Votefst))
                ) && 
                (
                    this.Votekd == input.Votekd ||
                    (this.Votekd != null &&
                    this.Votekd.Equals(input.Votekd))
                ) && 
                (
                    this.Votelst == input.Votelst ||
                    (this.Votelst != null &&
                    this.Votelst.Equals(input.Votelst))
                ) && 
                (
                    this.Vrfpkb64 == input.Vrfpkb64 ||
                    (this.Vrfpkb64 != null &&
                    this.Vrfpkb64.Equals(input.Vrfpkb64))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Partpkb64 != null)
                    hashCode = hashCode * 59 + this.Partpkb64.GetHashCode();
                if (this.Votefst != null)
                    hashCode = hashCode * 59 + this.Votefst.GetHashCode();
                if (this.Votekd != null)
                    hashCode = hashCode * 59 + this.Votekd.GetHashCode();
                if (this.Votelst != null)
                    hashCode = hashCode * 59 + this.Votelst.GetHashCode();
                if (this.Vrfpkb64 != null)
                    hashCode = hashCode * 59 + this.Vrfpkb64.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
