/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// BuildVersion
    /// </summary>
    [DataContract]
        public partial class BuildVersion :  IEquatable<BuildVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildVersion" /> class.
        /// </summary>
        /// <param name="branch">branch (required).</param>
        /// <param name="buildNumber">buildNumber (required).</param>
        /// <param name="channel">channel (required).</param>
        /// <param name="commitHash">commitHash (required).</param>
        /// <param name="major">major (required).</param>
        /// <param name="minor">minor (required).</param>
        public BuildVersion(string branch = default(string), long? buildNumber = default(long?), string channel = default(string), string commitHash = default(string), long? major = default(long?), long? minor = default(long?))
        {
            // to ensure "branch" is required (not null)
            if (branch == null)
            {
                throw new InvalidDataException("branch is a required property for BuildVersion and cannot be null");
            }
            else
            {
                this.Branch = branch;
            }
            // to ensure "buildNumber" is required (not null)
            if (buildNumber == null)
            {
                throw new InvalidDataException("buildNumber is a required property for BuildVersion and cannot be null");
            }
            else
            {
                this.BuildNumber = buildNumber;
            }
            // to ensure "channel" is required (not null)
            if (channel == null)
            {
                throw new InvalidDataException("channel is a required property for BuildVersion and cannot be null");
            }
            else
            {
                this.Channel = channel;
            }
            // to ensure "commitHash" is required (not null)
            if (commitHash == null)
            {
                throw new InvalidDataException("commitHash is a required property for BuildVersion and cannot be null");
            }
            else
            {
                this.CommitHash = commitHash;
            }
            // to ensure "major" is required (not null)
            if (major == null)
            {
                throw new InvalidDataException("major is a required property for BuildVersion and cannot be null");
            }
            else
            {
                this.Major = major;
            }
            // to ensure "minor" is required (not null)
            if (minor == null)
            {
                throw new InvalidDataException("minor is a required property for BuildVersion and cannot be null");
            }
            else
            {
                this.Minor = minor;
            }
        }
        
        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or Sets BuildNumber
        /// </summary>
        [DataMember(Name="build_number", EmitDefaultValue=false)]
        public long? BuildNumber { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets CommitHash
        /// </summary>
        [DataMember(Name="commit_hash", EmitDefaultValue=false)]
        public string CommitHash { get; set; }

        /// <summary>
        /// Gets or Sets Major
        /// </summary>
        [DataMember(Name="major", EmitDefaultValue=false)]
        public long? Major { get; set; }

        /// <summary>
        /// Gets or Sets Minor
        /// </summary>
        [DataMember(Name="minor", EmitDefaultValue=false)]
        public long? Minor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildVersion {\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  BuildNumber: ").Append(BuildNumber).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  CommitHash: ").Append(CommitHash).Append("\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildVersion);
        }

        /// <summary>
        /// Returns true if BuildVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.BuildNumber == input.BuildNumber ||
                    (this.BuildNumber != null &&
                    this.BuildNumber.Equals(input.BuildNumber))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.CommitHash == input.CommitHash ||
                    (this.CommitHash != null &&
                    this.CommitHash.Equals(input.CommitHash))
                ) && 
                (
                    this.Major == input.Major ||
                    (this.Major != null &&
                    this.Major.Equals(input.Major))
                ) && 
                (
                    this.Minor == input.Minor ||
                    (this.Minor != null &&
                    this.Minor.Equals(input.Minor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.BuildNumber != null)
                    hashCode = hashCode * 59 + this.BuildNumber.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.CommitHash != null)
                    hashCode = hashCode * 59 + this.CommitHash.GetHashCode();
                if (this.Major != null)
                    hashCode = hashCode * 59 + this.Major.GetHashCode();
                if (this.Minor != null)
                    hashCode = hashCode * 59 + this.Minor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
