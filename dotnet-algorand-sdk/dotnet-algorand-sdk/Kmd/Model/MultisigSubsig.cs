/* 
 * for KMD HTTP API
 *
 * API for KMD (Key Management Daemon)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Kmd.Model
{
    /// <summary>
    /// MultisigSubsig is a struct that holds a pair of public key and signatures signatures may be empty
    /// </summary>
    [DataContract]
        public partial class MultisigSubsig :  IEquatable<MultisigSubsig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigSubsig" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="sig">sig.</param>
        public MultisigSubsig(PublicKey key = default(PublicKey), Signature sig = default(Signature))
        {
            this.Key = key;
            this.Sig = sig;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public PublicKey Key { get; set; }

        /// <summary>
        /// Gets or Sets Sig
        /// </summary>
        [DataMember(Name="Sig", EmitDefaultValue=false)]
        public Signature Sig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MultisigSubsig {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Sig: ").Append(Sig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MultisigSubsig);
        }

        /// <summary>
        /// Returns true if MultisigSubsig instances are equal
        /// </summary>
        /// <param name="input">Instance of MultisigSubsig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MultisigSubsig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Sig == input.Sig ||
                    (this.Sig != null &&
                    this.Sig.Equals(input.Sig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Sig != null)
                    hashCode = hashCode * 59 + this.Sig.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
