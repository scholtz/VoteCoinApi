/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// PaymentTransactionType contains the additional fields for a payment Transaction
    /// </summary>
    [DataContract]
        public partial class PaymentTransactionType :  IEquatable<PaymentTransactionType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTransactionType" /> class.
        /// </summary>
        /// <param name="amount">Amount is the amount of MicroAlgos intended to be transferred (required).</param>
        /// <param name="close">CloseRemainderTo is the address the sender closed to.</param>
        /// <param name="closeamount">CloseAmount is the amount sent to CloseRemainderTo, for committed transaction.</param>
        /// <param name="closerewards">CloseRewards is the amount of pending rewards applied to the CloseRemainderTo account as part of this transaction..</param>
        /// <param name="to">To is the receiver&#x27;s address (required).</param>
        /// <param name="torewards">ToRewards is the amount of pending rewards applied to the To account as part of this transaction..</param>
        public PaymentTransactionType(ulong? amount = default(ulong?), string close = default(string), ulong? closeamount = default(ulong?), ulong? closerewards = default(ulong?), string to = default(string), ulong? torewards = default(ulong?))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for PaymentTransactionType and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for PaymentTransactionType and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.Close = close;
            this.Closeamount = closeamount;
            this.Closerewards = closerewards;
            this.Torewards = torewards;
        }
        
        /// <summary>
        /// Amount is the amount of MicroAlgos intended to be transferred
        /// </summary>
        /// <value>Amount is the amount of MicroAlgos intended to be transferred</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public ulong? Amount { get; set; }

        /// <summary>
        /// CloseRemainderTo is the address the sender closed to
        /// </summary>
        /// <value>CloseRemainderTo is the address the sender closed to</value>
        [DataMember(Name="close", EmitDefaultValue=false)]
        public string Close { get; set; }

        /// <summary>
        /// CloseAmount is the amount sent to CloseRemainderTo, for committed transaction
        /// </summary>
        /// <value>CloseAmount is the amount sent to CloseRemainderTo, for committed transaction</value>
        [DataMember(Name="closeamount", EmitDefaultValue=false)]
        public ulong? Closeamount { get; set; }

        /// <summary>
        /// CloseRewards is the amount of pending rewards applied to the CloseRemainderTo account as part of this transaction.
        /// </summary>
        /// <value>CloseRewards is the amount of pending rewards applied to the CloseRemainderTo account as part of this transaction.</value>
        [DataMember(Name="closerewards", EmitDefaultValue=false)]
        public ulong? Closerewards { get; set; }

        /// <summary>
        /// To is the receiver&#x27;s address
        /// </summary>
        /// <value>To is the receiver&#x27;s address</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// ToRewards is the amount of pending rewards applied to the To account as part of this transaction.
        /// </summary>
        /// <value>ToRewards is the amount of pending rewards applied to the To account as part of this transaction.</value>
        [DataMember(Name="torewards", EmitDefaultValue=false)]
        public ulong? Torewards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentTransactionType {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  Closeamount: ").Append(Closeamount).Append("\n");
            sb.Append("  Closerewards: ").Append(Closerewards).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Torewards: ").Append(Torewards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentTransactionType);
        }

        /// <summary>
        /// Returns true if PaymentTransactionType instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentTransactionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentTransactionType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Close == input.Close ||
                    (this.Close != null &&
                    this.Close.Equals(input.Close))
                ) && 
                (
                    this.Closeamount == input.Closeamount ||
                    (this.Closeamount != null &&
                    this.Closeamount.Equals(input.Closeamount))
                ) && 
                (
                    this.Closerewards == input.Closerewards ||
                    (this.Closerewards != null &&
                    this.Closerewards.Equals(input.Closerewards))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Torewards == input.Torewards ||
                    (this.Torewards != null &&
                    this.Torewards.Equals(input.Torewards))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Close != null)
                    hashCode = hashCode * 59 + this.Close.GetHashCode();
                if (this.Closeamount != null)
                    hashCode = hashCode * 59 + this.Closeamount.GetHashCode();
                if (this.Closerewards != null)
                    hashCode = hashCode * 59 + this.Closerewards.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Torewards != null)
                    hashCode = hashCode * 59 + this.Torewards.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
