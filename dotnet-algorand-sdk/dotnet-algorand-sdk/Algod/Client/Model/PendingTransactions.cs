/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// PendingTransactions represents a potentially truncated list of transactions currently in the node&#x27;s transaction pool.
    /// </summary>
    [DataContract]
        public partial class PendingTransactions :  IEquatable<PendingTransactions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PendingTransactions" /> class.
        /// </summary>
        /// <param name="totalTxns">TotalTxns (required).</param>
        /// <param name="truncatedTxns">truncatedTxns (required).</param>
        public PendingTransactions(ulong? totalTxns = default(ulong?), TransactionList truncatedTxns = default(TransactionList))
        {
            // to ensure "totalTxns" is required (not null)
            if (totalTxns == null)
            {
                throw new InvalidDataException("totalTxns is a required property for PendingTransactions and cannot be null");
            }
            else
            {
                this.TotalTxns = totalTxns;
            }
            // to ensure "truncatedTxns" is required (not null)
            if (truncatedTxns == null)
            {
                throw new InvalidDataException("truncatedTxns is a required property for PendingTransactions and cannot be null");
            }
            else
            {
                this.TruncatedTxns = truncatedTxns;
            }
        }
        
        /// <summary>
        /// TotalTxns
        /// </summary>
        /// <value>TotalTxns</value>
        [DataMember(Name="totalTxns", EmitDefaultValue=false)]
        public ulong? TotalTxns { get; set; }

        /// <summary>
        /// Gets or Sets TruncatedTxns
        /// </summary>
        [DataMember(Name="truncatedTxns", EmitDefaultValue=false)]
        public TransactionList TruncatedTxns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PendingTransactions {\n");
            sb.Append("  TotalTxns: ").Append(TotalTxns).Append("\n");
            sb.Append("  TruncatedTxns: ").Append(TruncatedTxns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PendingTransactions);
        }

        /// <summary>
        /// Returns true if PendingTransactions instances are equal
        /// </summary>
        /// <param name="input">Instance of PendingTransactions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PendingTransactions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TotalTxns == input.TotalTxns ||
                    (this.TotalTxns != null &&
                    this.TotalTxns.Equals(input.TotalTxns))
                ) && 
                (
                    this.TruncatedTxns == input.TruncatedTxns ||
                    (this.TruncatedTxns != null &&
                    this.TruncatedTxns.Equals(input.TruncatedTxns))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalTxns != null)
                    hashCode = hashCode * 59 + this.TotalTxns.GetHashCode();
                if (this.TruncatedTxns != null)
                    hashCode = hashCode * 59 + this.TruncatedTxns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
