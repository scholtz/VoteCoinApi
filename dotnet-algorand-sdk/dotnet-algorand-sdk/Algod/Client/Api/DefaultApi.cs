/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Version = Algorand.Algod.Model.Version;
using Algorand.Algod.Model;
using Algorand.Client;

namespace Algorand.Algod.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get account information.
        /// </summary>
        /// <remarks>
        /// Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <returns>Account</returns>
        Model.Account AccountInformation(string address);

        /// <summary>
        /// Get account information.
        /// </summary>
        /// <remarks>
        /// Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Model.Account> AccountInformationWithHttpInfo(string address);
        /// <summary>
        /// Get asset information.
        /// </summary>
        /// <remarks>
        /// Given the asset&#x27;s unique index, this call returns the asset&#x27;s creator, manager, reserve, freeze, and clawback addresses 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Asset index</param>
        /// <returns>AssetParams</returns>
        AssetParams AssetInformation(long? index);

        /// <summary>
        /// Get asset information.
        /// </summary>
        /// <remarks>
        /// Given the asset&#x27;s unique index, this call returns the asset&#x27;s creator, manager, reserve, freeze, and clawback addresses 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Asset index</param>
        /// <returns>ApiResponse of AssetParams</returns>
        ApiResponse<AssetParams> AssetInformationWithHttpInfo(long? index);
        /// <summary>
        /// List assets
        /// </summary>
        /// <remarks>
        /// Returns list of up to &#x60;max&#x60; assets, where the maximum assetIdx is &lt;&#x3D; &#x60;assetIdx&#x60;
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdx">Fetch assets with asset index &lt;&#x3D; assetIdx. If zero, fetch most recent assets. (optional)</param>
        /// <param name="max">Fetch no more than this many assets (optional)</param>
        /// <returns>AssetList</returns>
        AssetList Assets(long? assetIdx = null, long? max = null);

        /// <summary>
        /// List assets
        /// </summary>
        /// <remarks>
        /// Returns list of up to &#x60;max&#x60; assets, where the maximum assetIdx is &lt;&#x3D; &#x60;assetIdx&#x60;
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdx">Fetch assets with asset index &lt;&#x3D; assetIdx. If zero, fetch most recent assets. (optional)</param>
        /// <param name="max">Fetch no more than this many assets (optional)</param>
        /// <returns>ApiResponse of AssetList</returns>
        ApiResponse<AssetList> AssetsWithHttpInfo(long? assetIdx = null, long? max = null);
        /// <summary>
        /// Get the block for the given round.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <returns>Block</returns>
        Block GetBlock(long? round);

        /// <summary>
        /// Get the block for the given round.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <returns>ApiResponse of Block</returns>
        ApiResponse<Block> GetBlockWithHttpInfo(long? round);
        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>PendingTransactions</returns>
        PendingTransactions GetPendingTransactions(long? max = null);

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>ApiResponse of PendingTransactions</returns>
        ApiResponse<PendingTransactions> GetPendingTransactionsWithHttpInfo(long? max = null);
        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>PendingTransactions</returns>
        PendingTransactions GetPendingTransactionsByAddress(string addr, long? max = null);

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>ApiResponse of PendingTransactions</returns>
        ApiResponse<PendingTransactions> GetPendingTransactionsByAddressWithHttpInfo(string addr, long? max = null);
        /// <summary>
        /// Gets the current node status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeStatus</returns>
        NodeStatus GetStatus();

        /// <summary>
        /// Gets the current node status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeStatus</returns>
        ApiResponse<NodeStatus> GetStatusWithHttpInfo();
        /// <summary>
        /// Get the current supply reported by the ledger.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Supply</returns>
        Supply GetSupply();

        /// <summary>
        /// Get the current supply reported by the ledger.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Supply</returns>
        ApiResponse<Supply> GetSupplyWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the current version
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Version</returns>
        Version GetVersion();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the current version
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Version</returns>
        ApiResponse<Version> GetVersionWithHttpInfo();
        /// <summary>
        /// Returns OK if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void HealthCheck();

        /// <summary>
        /// Returns OK if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HealthCheckWithHttpInfo();
        /// <summary>
        /// Return metrics about algod functioning.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Metrics();

        /// <summary>
        /// Return metrics about algod functioning.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MetricsWithHttpInfo();
        /// <summary>
        /// Get a specific pending transaction.
        /// </summary>
        /// <remarks>
        /// Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Transaction</returns>
        Model.Transaction PendingTransactionInformation(string txid);

        /// <summary>
        /// Get a specific pending transaction.
        /// </summary>
        /// <remarks>
        /// Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Model.Transaction> PendingTransactionInformationWithHttpInfo(string txid);
        /// <summary>
        /// Broadcasts a raw transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>TransactionID</returns>
        TransactionID RawTransaction(byte[] body);

        /// <summary>
        /// Broadcasts a raw transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>ApiResponse of TransactionID</returns>
        ApiResponse<TransactionID> RawTransactionWithHttpInfo(byte[] body);
        /// <summary>
        /// Get the suggested fee
        /// </summary>
        /// <remarks>
        /// Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionFee</returns>
        TransactionFee SuggestedFee();

        /// <summary>
        /// Get the suggested fee
        /// </summary>
        /// <remarks>
        /// Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionFee</returns>
        ApiResponse<TransactionFee> SuggestedFeeWithHttpInfo();
        /// <summary>
        /// Gets the current swagger spec.
        /// </summary>
        /// <remarks>
        /// Returns the entire swagger spec in json.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string SwaggerJSON();

        /// <summary>
        /// Gets the current swagger spec.
        /// </summary>
        /// <remarks>
        /// Returns the entire swagger spec in json.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SwaggerJSONWithHttpInfo();
        /// <summary>
        /// Get an information of a single transaction.
        /// </summary>
        /// <remarks>
        /// Returns the transaction information of the given txid. Works only if the indexer is enabled.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Transaction</returns>
        Model.Transaction Transaction(string txid);

        /// <summary>
        /// Get an information of a single transaction.
        /// </summary>
        /// <remarks>
        /// Returns the transaction information of the given txid. Works only if the indexer is enabled.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Model.Transaction> TransactionWithHttpInfo(string txid);
        /// <summary>
        /// Get a specific confirmed transaction.
        /// </summary>
        /// <remarks>
        /// Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to &lt;CurrentProtocol&gt;.MaxTxnLife blocks in the past. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="txid">A transaction id</param>
        /// <returns>Transaction</returns>
        Model.Transaction TransactionInformation(string address, string txid);

        /// <summary>
        /// Get a specific confirmed transaction.
        /// </summary>
        /// <remarks>
        /// Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to &lt;CurrentProtocol&gt;.MaxTxnLife blocks in the past. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="txid">A transaction id</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Model.Transaction> TransactionInformationWithHttpInfo(string address, string txid);
        /// <summary>
        /// Get parameters for constructing a new transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionParams</returns>
        TransactionParams TransactionParams();

        /// <summary>
        /// Get parameters for constructing a new transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionParams</returns>
        ApiResponse<TransactionParams> TransactionParamsWithHttpInfo();
        /// <summary>
        /// Get a list of confirmed transactions.
        /// </summary>
        /// <remarks>
        /// Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="firstRound">Do not fetch any transactions before this round. (optional)</param>
        /// <param name="lastRound">Do not fetch any transactions after this round. (optional)</param>
        /// <param name="fromDate">Do not fetch any transactions before this date. (enabled only with indexer) (optional)</param>
        /// <param name="toDate">Do not fetch any transactions after this date. (enabled only with indexer) (optional)</param>
        /// <param name="max">maximum transactions to show (default to 100) (optional)</param>
        /// <returns>TransactionList</returns>
        TransactionList Transactions(string address, long? firstRound = null, long? lastRound = null, DateTime? fromDate = null, DateTime? toDate = null, long? max = null);

        /// <summary>
        /// Get a list of confirmed transactions.
        /// </summary>
        /// <remarks>
        /// Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="firstRound">Do not fetch any transactions before this round. (optional)</param>
        /// <param name="lastRound">Do not fetch any transactions after this round. (optional)</param>
        /// <param name="fromDate">Do not fetch any transactions before this date. (enabled only with indexer) (optional)</param>
        /// <param name="toDate">Do not fetch any transactions after this date. (enabled only with indexer) (optional)</param>
        /// <param name="max">maximum transactions to show (default to 100) (optional)</param>
        /// <returns>ApiResponse of TransactionList</returns>
        ApiResponse<TransactionList> TransactionsWithHttpInfo(string address, long? firstRound = null, long? lastRound = null, DateTime? fromDate = null, DateTime? toDate = null, long? max = null);
        /// <summary>
        /// Gets the node status after waiting for the given round.
        /// </summary>
        /// <remarks>
        /// Waits for a block to appear after round {round} and returns the node&#x27;s status at the time.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>NodeStatus</returns>
        NodeStatus WaitForBlock(long? round);

        /// <summary>
        /// Gets the node status after waiting for the given round.
        /// </summary>
        /// <remarks>
        /// Waits for a block to appear after round {round} and returns the node&#x27;s status at the time.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>ApiResponse of NodeStatus</returns>
        ApiResponse<NodeStatus> WaitForBlockWithHttpInfo(long? round);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get account information.
        /// </summary>
        /// <remarks>
        /// Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Model.Account> AccountInformationAsync(string address);

        /// <summary>
        /// Get account information.
        /// </summary>
        /// <remarks>
        /// Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model.Account>> AccountInformationAsyncWithHttpInfo(string address);
        /// <summary>
        /// Get asset information.
        /// </summary>
        /// <remarks>
        /// Given the asset&#x27;s unique index, this call returns the asset&#x27;s creator, manager, reserve, freeze, and clawback addresses 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Asset index</param>
        /// <returns>Task of AssetParams</returns>
        System.Threading.Tasks.Task<AssetParams> AssetInformationAsync(long? index);

        /// <summary>
        /// Get asset information.
        /// </summary>
        /// <remarks>
        /// Given the asset&#x27;s unique index, this call returns the asset&#x27;s creator, manager, reserve, freeze, and clawback addresses 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Asset index</param>
        /// <returns>Task of ApiResponse (AssetParams)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetParams>> AssetInformationAsyncWithHttpInfo(long? index);
        /// <summary>
        /// List assets
        /// </summary>
        /// <remarks>
        /// Returns list of up to &#x60;max&#x60; assets, where the maximum assetIdx is &lt;&#x3D; &#x60;assetIdx&#x60;
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdx">Fetch assets with asset index &lt;&#x3D; assetIdx. If zero, fetch most recent assets. (optional)</param>
        /// <param name="max">Fetch no more than this many assets (optional)</param>
        /// <returns>Task of AssetList</returns>
        System.Threading.Tasks.Task<AssetList> AssetsAsync(long? assetIdx = null, long? max = null);

        /// <summary>
        /// List assets
        /// </summary>
        /// <remarks>
        /// Returns list of up to &#x60;max&#x60; assets, where the maximum assetIdx is &lt;&#x3D; &#x60;assetIdx&#x60;
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdx">Fetch assets with asset index &lt;&#x3D; assetIdx. If zero, fetch most recent assets. (optional)</param>
        /// <param name="max">Fetch no more than this many assets (optional)</param>
        /// <returns>Task of ApiResponse (AssetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetList>> AssetsAsyncWithHttpInfo(long? assetIdx = null, long? max = null);
        /// <summary>
        /// Get the block for the given round.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <returns>Task of Block</returns>
        System.Threading.Tasks.Task<Block> GetBlockAsync(long? round);

        /// <summary>
        /// Get the block for the given round.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <returns>Task of ApiResponse (Block)</returns>
        System.Threading.Tasks.Task<ApiResponse<Block>> GetBlockAsyncWithHttpInfo(long? round);
        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>Task of PendingTransactions</returns>
        System.Threading.Tasks.Task<PendingTransactions> GetPendingTransactionsAsync(long? max = null);

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTransactions>> GetPendingTransactionsAsyncWithHttpInfo(long? max = null);
        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>Task of PendingTransactions</returns>
        System.Threading.Tasks.Task<PendingTransactions> GetPendingTransactionsByAddressAsync(string addr, long? max = null);

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address.
        /// </summary>
        /// <remarks>
        /// Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactions)</returns>
        System.Threading.Tasks.Task<ApiResponse<PendingTransactions>> GetPendingTransactionsByAddressAsyncWithHttpInfo(string addr, long? max = null);
        /// <summary>
        /// Gets the current node status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NodeStatus</returns>
        System.Threading.Tasks.Task<NodeStatus> GetStatusAsync();

        /// <summary>
        /// Gets the current node status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NodeStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeStatus>> GetStatusAsyncWithHttpInfo();
        /// <summary>
        /// Get the current supply reported by the ledger.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Supply</returns>
        System.Threading.Tasks.Task<Supply> GetSupplyAsync();

        /// <summary>
        /// Get the current supply reported by the ledger.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Supply)</returns>
        System.Threading.Tasks.Task<ApiResponse<Supply>> GetSupplyAsyncWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the current version
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Version</returns>
        System.Threading.Tasks.Task<Version> GetVersionAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the current version
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Version)</returns>
        System.Threading.Tasks.Task<ApiResponse<Version>> GetVersionAsyncWithHttpInfo();
        /// <summary>
        /// Returns OK if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HealthCheckAsync();

        /// <summary>
        /// Returns OK if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HealthCheckAsyncWithHttpInfo();
        /// <summary>
        /// Return metrics about algod functioning.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MetricsAsync();

        /// <summary>
        /// Return metrics about algod functioning.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MetricsAsyncWithHttpInfo();
        /// <summary>
        /// Get a specific pending transaction.
        /// </summary>
        /// <remarks>
        /// Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Model.Transaction> PendingTransactionInformationAsync(string txid);

        /// <summary>
        /// Get a specific pending transaction.
        /// </summary>
        /// <remarks>
        /// Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model.Transaction>> PendingTransactionInformationAsyncWithHttpInfo(string txid);
        /// <summary>
        /// Broadcasts a raw transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>Task of TransactionID</returns>
        System.Threading.Tasks.Task<TransactionID> RawTransactionAsync(string body);

        /// <summary>
        /// Broadcasts a raw transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>Task of ApiResponse (TransactionID)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionID>> RawTransactionAsyncWithHttpInfo(string body);
        /// <summary>
        /// Get the suggested fee
        /// </summary>
        /// <remarks>
        /// Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionFee</returns>
        System.Threading.Tasks.Task<TransactionFee> SuggestedFeeAsync();

        /// <summary>
        /// Get the suggested fee
        /// </summary>
        /// <remarks>
        /// Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionFee)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionFee>> SuggestedFeeAsyncWithHttpInfo();
        /// <summary>
        /// Gets the current swagger spec.
        /// </summary>
        /// <remarks>
        /// Returns the entire swagger spec in json.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SwaggerJSONAsync();

        /// <summary>
        /// Gets the current swagger spec.
        /// </summary>
        /// <remarks>
        /// Returns the entire swagger spec in json.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SwaggerJSONAsyncWithHttpInfo();
        /// <summary>
        /// Get an information of a single transaction.
        /// </summary>
        /// <remarks>
        /// Returns the transaction information of the given txid. Works only if the indexer is enabled.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Model.Transaction> TransactionAsync(string txid);

        /// <summary>
        /// Get an information of a single transaction.
        /// </summary>
        /// <remarks>
        /// Returns the transaction information of the given txid. Works only if the indexer is enabled.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model.Transaction>> TransactionAsyncWithHttpInfo(string txid);
        /// <summary>
        /// Get a specific confirmed transaction.
        /// </summary>
        /// <remarks>
        /// Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to &lt;CurrentProtocol&gt;.MaxTxnLife blocks in the past. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Model.Transaction> TransactionInformationAsync(string address, string txid);

        /// <summary>
        /// Get a specific confirmed transaction.
        /// </summary>
        /// <remarks>
        /// Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to &lt;CurrentProtocol&gt;.MaxTxnLife blocks in the past. 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model.Transaction>> TransactionInformationAsyncWithHttpInfo(string address, string txid);
        /// <summary>
        /// Get parameters for constructing a new transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionParams</returns>
        System.Threading.Tasks.Task<TransactionParams> TransactionParamsAsync();

        /// <summary>
        /// Get parameters for constructing a new transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionParams)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionParams>> TransactionParamsAsyncWithHttpInfo();
        /// <summary>
        /// Get a list of confirmed transactions.
        /// </summary>
        /// <remarks>
        /// Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="firstRound">Do not fetch any transactions before this round. (optional)</param>
        /// <param name="lastRound">Do not fetch any transactions after this round. (optional)</param>
        /// <param name="fromDate">Do not fetch any transactions before this date. (enabled only with indexer) (optional)</param>
        /// <param name="toDate">Do not fetch any transactions after this date. (enabled only with indexer) (optional)</param>
        /// <param name="max">maximum transactions to show (default to 100) (optional)</param>
        /// <returns>Task of TransactionList</returns>
        System.Threading.Tasks.Task<TransactionList> TransactionsAsync(string address, long? firstRound = null, long? lastRound = null, DateTime? fromDate = null, DateTime? toDate = null, long? max = null);

        /// <summary>
        /// Get a list of confirmed transactions.
        /// </summary>
        /// <remarks>
        /// Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="firstRound">Do not fetch any transactions before this round. (optional)</param>
        /// <param name="lastRound">Do not fetch any transactions after this round. (optional)</param>
        /// <param name="fromDate">Do not fetch any transactions before this date. (enabled only with indexer) (optional)</param>
        /// <param name="toDate">Do not fetch any transactions after this date. (enabled only with indexer) (optional)</param>
        /// <param name="max">maximum transactions to show (default to 100) (optional)</param>
        /// <returns>Task of ApiResponse (TransactionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionList>> TransactionsAsyncWithHttpInfo(string address, long? firstRound = null, long? lastRound = null, DateTime? fromDate = null, DateTime? toDate = null, long? max = null);
        /// <summary>
        /// Gets the node status after waiting for the given round.
        /// </summary>
        /// <remarks>
        /// Waits for a block to appear after round {round} and returns the node&#x27;s status at the time.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>Task of NodeStatus</returns>
        System.Threading.Tasks.Task<NodeStatus> WaitForBlockAsync(long? round);

        /// <summary>
        /// Gets the node status after waiting for the given round.
        /// </summary>
        /// <remarks>
        /// Waits for a block to appear after round {round} and returns the node&#x27;s status at the time.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>Task of ApiResponse (NodeStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeStatus>> WaitForBlockAsyncWithHttpInfo(long? round);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Algorand.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Algorand.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Algorand.Client.Configuration.Default;

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Algorand.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Algorand.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Algorand.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Algorand.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get account information. Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <returns>Account</returns>
        public Model.Account AccountInformation(string address)
        {
            ApiResponse<Model.Account> localVarResponse = AccountInformationWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get account information. Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse<Model.Account> AccountInformationWithHttpInfo(string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->AccountInformation");

            var localVarPath = "/v1/account/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Model.Account)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Account)));
        }

        /// <summary>
        /// Get account information. Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Model.Account> AccountInformationAsync(string address)
        {
            ApiResponse<Model.Account> localVarResponse = await AccountInformationAsyncWithHttpInfo(address);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get account information. Given a specific account public key, this call returns the accounts status, balance and spendable amounts
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model.Account>> AccountInformationAsyncWithHttpInfo(string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->AccountInformation");

            var localVarPath = "/v1/account/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Model.Account)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Account)));
        }

        /// <summary>
        /// Get asset information. Given the asset&#x27;s unique index, this call returns the asset&#x27;s creator, manager, reserve, freeze, and clawback addresses 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Asset index</param>
        /// <returns>AssetParams</returns>
        public AssetParams AssetInformation(long? index)
        {
            ApiResponse<AssetParams> localVarResponse = AssetInformationWithHttpInfo(index);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get asset information. Given the asset&#x27;s unique index, this call returns the asset&#x27;s creator, manager, reserve, freeze, and clawback addresses 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Asset index</param>
        /// <returns>ApiResponse of AssetParams</returns>
        public ApiResponse<AssetParams> AssetInformationWithHttpInfo(long? index)
        {
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling DefaultApi->AssetInformation");

            var localVarPath = "/v1/asset/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetParams>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetParams)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetParams)));
        }

        /// <summary>
        /// Get asset information. Given the asset&#x27;s unique index, this call returns the asset&#x27;s creator, manager, reserve, freeze, and clawback addresses 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Asset index</param>
        /// <returns>Task of AssetParams</returns>
        public async System.Threading.Tasks.Task<AssetParams> AssetInformationAsync(long? index)
        {
            ApiResponse<AssetParams> localVarResponse = await AssetInformationAsyncWithHttpInfo(index);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get asset information. Given the asset&#x27;s unique index, this call returns the asset&#x27;s creator, manager, reserve, freeze, and clawback addresses 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index">Asset index</param>
        /// <returns>Task of ApiResponse (AssetParams)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetParams>> AssetInformationAsyncWithHttpInfo(long? index)
        {
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling DefaultApi->AssetInformation");

            var localVarPath = "/v1/asset/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssetInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetParams>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetParams)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetParams)));
        }

        /// <summary>
        /// List assets Returns list of up to &#x60;max&#x60; assets, where the maximum assetIdx is &lt;&#x3D; &#x60;assetIdx&#x60;
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdx">Fetch assets with asset index &lt;&#x3D; assetIdx. If zero, fetch most recent assets. (optional)</param>
        /// <param name="max">Fetch no more than this many assets (optional)</param>
        /// <returns>AssetList</returns>
        public AssetList Assets(long? assetIdx = null, long? max = null)
        {
            ApiResponse<AssetList> localVarResponse = AssetsWithHttpInfo(assetIdx, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List assets Returns list of up to &#x60;max&#x60; assets, where the maximum assetIdx is &lt;&#x3D; &#x60;assetIdx&#x60;
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdx">Fetch assets with asset index &lt;&#x3D; assetIdx. If zero, fetch most recent assets. (optional)</param>
        /// <param name="max">Fetch no more than this many assets (optional)</param>
        /// <returns>ApiResponse of AssetList</returns>
        public ApiResponse<AssetList> AssetsWithHttpInfo(long? assetIdx = null, long? max = null)
        {

            var localVarPath = "/v1/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetIdx != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetIdx", assetIdx)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Assets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetList)));
        }

        /// <summary>
        /// List assets Returns list of up to &#x60;max&#x60; assets, where the maximum assetIdx is &lt;&#x3D; &#x60;assetIdx&#x60;
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdx">Fetch assets with asset index &lt;&#x3D; assetIdx. If zero, fetch most recent assets. (optional)</param>
        /// <param name="max">Fetch no more than this many assets (optional)</param>
        /// <returns>Task of AssetList</returns>
        public async System.Threading.Tasks.Task<AssetList> AssetsAsync(long? assetIdx = null, long? max = null)
        {
            ApiResponse<AssetList> localVarResponse = await AssetsAsyncWithHttpInfo(assetIdx, max);
            return localVarResponse.Data;

        }

        /// <summary>
        /// List assets Returns list of up to &#x60;max&#x60; assets, where the maximum assetIdx is &lt;&#x3D; &#x60;assetIdx&#x60;
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIdx">Fetch assets with asset index &lt;&#x3D; assetIdx. If zero, fetch most recent assets. (optional)</param>
        /// <param name="max">Fetch no more than this many assets (optional)</param>
        /// <returns>Task of ApiResponse (AssetList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssetList>> AssetsAsyncWithHttpInfo(long? assetIdx = null, long? max = null)
        {

            var localVarPath = "/v1/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetIdx != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetIdx", assetIdx)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Assets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssetList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssetList)));
        }

        /// <summary>
        /// Get the block for the given round. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <returns>Block</returns>
        public Block GetBlock(long? round)
        {
            ApiResponse<Block> localVarResponse = GetBlockWithHttpInfo(round);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the block for the given round. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <returns>ApiResponse of Block</returns>
        public ApiResponse<Block> GetBlockWithHttpInfo(long? round)
        {
            // verify the required parameter 'round' is set
            if (round == null)
                throw new ApiException(400, "Missing required parameter 'round' when calling DefaultApi->GetBlock");

            var localVarPath = "/v1/block/{round}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (round != null) localVarPathParams.Add("round", this.Configuration.ApiClient.ParameterToString(round)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Block>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Block)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Block)));
        }

        /// <summary>
        /// Get the block for the given round. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <returns>Task of Block</returns>
        public async System.Threading.Tasks.Task<Block> GetBlockAsync(long? round)
        {
            ApiResponse<Block> localVarResponse = await GetBlockAsyncWithHttpInfo(round);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get the block for the given round. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round from which to fetch block information.</param>
        /// <returns>Task of ApiResponse (Block)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Block>> GetBlockAsyncWithHttpInfo(long? round)
        {
            // verify the required parameter 'round' is set
            if (round == null)
                throw new ApiException(400, "Missing required parameter 'round' when calling DefaultApi->GetBlock");

            var localVarPath = "/v1/block/{round}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (round != null) localVarPathParams.Add("round", this.Configuration.ApiClient.ParameterToString(round)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Block>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Block)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Block)));
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool. Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>PendingTransactions</returns>
        public PendingTransactions GetPendingTransactions(long? max = null)
        {
            ApiResponse<PendingTransactions> localVarResponse = GetPendingTransactionsWithHttpInfo(max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool. Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>ApiResponse of PendingTransactions</returns>
        public ApiResponse<PendingTransactions> GetPendingTransactionsWithHttpInfo(long? max = null)
        {

            var localVarPath = "/v1/transactions/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PendingTransactions)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactions)));
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool. Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>Task of PendingTransactions</returns>
        public async System.Threading.Tasks.Task<PendingTransactions> GetPendingTransactionsAsync(long? max = null)
        {
            ApiResponse<PendingTransactions> localVarResponse = await GetPendingTransactionsAsyncWithHttpInfo(max);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool. Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingTransactions>> GetPendingTransactionsAsyncWithHttpInfo(long? max = null)
        {

            var localVarPath = "/v1/transactions/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PendingTransactions)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactions)));
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address. Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>PendingTransactions</returns>
        public PendingTransactions GetPendingTransactionsByAddress(string addr, long? max = null)
        {
            ApiResponse<PendingTransactions> localVarResponse = GetPendingTransactionsByAddressWithHttpInfo(addr, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address. Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>ApiResponse of PendingTransactions</returns>
        public ApiResponse<PendingTransactions> GetPendingTransactionsByAddressWithHttpInfo(string addr, long? max = null)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->GetPendingTransactionsByAddress");

            var localVarPath = "/v1/account/{addr}/transactions/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarPathParams.Add("addr", this.Configuration.ApiClient.ParameterToString(addr)); // path parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingTransactionsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PendingTransactions)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactions)));
        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address. Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>Task of PendingTransactions</returns>
        public async System.Threading.Tasks.Task<PendingTransactions> GetPendingTransactionsByAddressAsync(string addr, long? max = null)
        {
            ApiResponse<PendingTransactions> localVarResponse = await GetPendingTransactionsByAddressAsyncWithHttpInfo(addr, max);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of unconfirmed transactions currently in the transaction pool by address. Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX &#x3D; 0, returns all pending transactions. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">An account public key</param>
        /// <param name="max">Truncated number of transactions to display. If max&#x3D;0, returns all pending txns. (optional)</param>
        /// <returns>Task of ApiResponse (PendingTransactions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PendingTransactions>> GetPendingTransactionsByAddressAsyncWithHttpInfo(string addr, long? max = null)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400, "Missing required parameter 'addr' when calling DefaultApi->GetPendingTransactionsByAddress");

            var localVarPath = "/v1/account/{addr}/transactions/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null) localVarPathParams.Add("addr", this.Configuration.ApiClient.ParameterToString(addr)); // path parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPendingTransactionsByAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PendingTransactions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PendingTransactions)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PendingTransactions)));
        }

        /// <summary>
        /// Gets the current node status. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NodeStatus</returns>
        public NodeStatus GetStatus()
        {
            ApiResponse<NodeStatus> localVarResponse = GetStatusWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current node status. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NodeStatus</returns>
        public ApiResponse<NodeStatus> GetStatusWithHttpInfo()
        {

            var localVarPath = "/v1/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeStatus)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatus)));
        }

        /// <summary>
        /// Gets the current node status. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NodeStatus</returns>
        public async System.Threading.Tasks.Task<NodeStatus> GetStatusAsync()
        {
            ApiResponse<NodeStatus> localVarResponse = await GetStatusAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current node status. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NodeStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeStatus>> GetStatusAsyncWithHttpInfo()
        {

            var localVarPath = "/v1/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeStatus)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatus)));
        }

        /// <summary>
        /// Get the current supply reported by the ledger. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Supply</returns>
        public Supply GetSupply()
        {
            ApiResponse<Supply> localVarResponse = GetSupplyWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current supply reported by the ledger. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Supply</returns>
        public ApiResponse<Supply> GetSupplyWithHttpInfo()
        {

            var localVarPath = "/v1/ledger/supply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }
            //else if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            //{
            //    localVarHeaderParams["X-API-Key"] = this.Configuration.GetApiKeyWithPrefix("X-API-Key");
            //}
            
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Supply>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Supply)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Supply)));
        }

        /// <summary>
        /// Get the current supply reported by the ledger. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Supply</returns>
        public async System.Threading.Tasks.Task<Supply> GetSupplyAsync()
        {
            ApiResponse<Supply> localVarResponse = await GetSupplyAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get the current supply reported by the ledger. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Supply)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Supply>> GetSupplyAsyncWithHttpInfo()
        {

            var localVarPath = "/v1/ledger/supply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Supply>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Supply)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Supply)));
        }

        /// <summary>
        ///  Retrieves the current version
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Version</returns>
        public Version GetVersion()
        {
            ApiResponse<Version> localVarResponse = GetVersionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the current version
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Version</returns>
        public ApiResponse<Version> GetVersionWithHttpInfo()
        {

            var localVarPath = "/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Version>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Version)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Version)));
        }

        /// <summary>
        ///  Retrieves the current version
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Version</returns>
        public async System.Threading.Tasks.Task<Version> GetVersionAsync()
        {
            ApiResponse<Version> localVarResponse = await GetVersionAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves the current version
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Version)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Version>> GetVersionAsyncWithHttpInfo()
        {

            var localVarPath = "/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Version>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Version)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Version)));
        }

        /// <summary>
        /// Returns OK if healthy. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void HealthCheck()
        {
            HealthCheckWithHttpInfo();
        }

        /// <summary>
        /// Returns OK if healthy. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HealthCheckWithHttpInfo()
        {

            var localVarPath = "/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Returns OK if healthy. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HealthCheckAsync()
        {
            await HealthCheckAsyncWithHttpInfo();

        }

        /// <summary>
        /// Returns OK if healthy. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HealthCheckAsyncWithHttpInfo()
        {

            var localVarPath = "/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Return metrics about algod functioning. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Metrics()
        {
            MetricsWithHttpInfo();
        }

        /// <summary>
        /// Return metrics about algod functioning. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MetricsWithHttpInfo()
        {

            var localVarPath = "/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Metrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Return metrics about algod functioning. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MetricsAsync()
        {
            await MetricsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Return metrics about algod functioning. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MetricsAsyncWithHttpInfo()
        {

            var localVarPath = "/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Metrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a specific pending transaction. Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Transaction</returns>
        public Model.Transaction PendingTransactionInformation(string txid)
        {
            ApiResponse<Model.Transaction> localVarResponse = PendingTransactionInformationWithHttpInfo(txid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific pending transaction. Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse<Model.Transaction> PendingTransactionInformationWithHttpInfo(string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->PendingTransactionInformation");

            var localVarPath = "/v1/transactions/pending/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTransactionInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Model.Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Transaction)));
        }

        /// <summary>
        /// Get a specific pending transaction. Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Model.Transaction> PendingTransactionInformationAsync(string txid)
        {
            ApiResponse<Model.Transaction> localVarResponse = await PendingTransactionInformationAsyncWithHttpInfo(txid);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific pending transaction. Given a transaction id of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed: - transaction committed (committed round &gt; 0) - transaction still in the pool (committed round &#x3D; 0, pool error &#x3D; \&quot;\&quot;) - transaction removed from pool due to error (committed round &#x3D; 0, pool error !&#x3D; \&quot;\&quot;) Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model.Transaction>> PendingTransactionInformationAsyncWithHttpInfo(string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->PendingTransactionInformation");

            var localVarPath = "/v1/transactions/pending/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTransactionInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Model.Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Transaction)));
        }

        /// <summary>
        /// Broadcasts a raw transaction to the network. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>TransactionID</returns>
        public TransactionID RawTransaction(byte[] body)
        {
            ApiResponse<TransactionID> localVarResponse = RawTransactionWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcasts a raw transaction to the network. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>ApiResponse of TransactionID</returns>
        //public ApiResponse<TransactionID> RawTransactionWithHttpInfo(string body)
        public ApiResponse<TransactionID> RawTransactionWithHttpInfo(byte[] body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RawTransaction");

            var localVarPath = "/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-binary"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionID>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionID)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionID)));
        }

        /// <summary>
        /// Broadcasts a raw transaction to the network. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>Task of TransactionID</returns>
        public async System.Threading.Tasks.Task<TransactionID> RawTransactionAsync(string body)
        {
            ApiResponse<TransactionID> localVarResponse = await RawTransactionAsyncWithHttpInfo(body);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Broadcasts a raw transaction to the network. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The byte encoded signed transaction to broadcast to network</param>
        /// <returns>Task of ApiResponse (TransactionID)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionID>> RawTransactionAsyncWithHttpInfo(string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RawTransaction");

            var localVarPath = "/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-binary"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RawTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionID>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionID)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionID)));
        }

        /// <summary>
        /// Get the suggested fee Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionFee</returns>
        public TransactionFee SuggestedFee()
        {
            ApiResponse<TransactionFee> localVarResponse = SuggestedFeeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the suggested fee Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionFee</returns>
        public ApiResponse<TransactionFee> SuggestedFeeWithHttpInfo()
        {

            var localVarPath = "/v1/transactions/fee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuggestedFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionFee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionFee)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionFee)));
        }

        /// <summary>
        /// Get the suggested fee Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionFee</returns>
        public async System.Threading.Tasks.Task<TransactionFee> SuggestedFeeAsync()
        {
            ApiResponse<TransactionFee> localVarResponse = await SuggestedFeeAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get the suggested fee Suggested Fee is returned in units of micro-Algos per byte. Suggested Fee may fall to zero but submitted transactions must still have a fee of at least MinTxnFee for the current network protocol. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionFee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionFee>> SuggestedFeeAsyncWithHttpInfo()
        {

            var localVarPath = "/v1/transactions/fee";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SuggestedFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionFee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionFee)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionFee)));
        }

        /// <summary>
        /// Gets the current swagger spec. Returns the entire swagger spec in json.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string SwaggerJSON()
        {
            ApiResponse<string> localVarResponse = SwaggerJSONWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current swagger spec. Returns the entire swagger spec in json.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> SwaggerJSONWithHttpInfo()
        {

            var localVarPath = "/swagger.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwaggerJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the current swagger spec. Returns the entire swagger spec in json.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SwaggerJSONAsync()
        {
            ApiResponse<string> localVarResponse = await SwaggerJSONAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current swagger spec. Returns the entire swagger spec in json.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SwaggerJSONAsyncWithHttpInfo()
        {

            var localVarPath = "/swagger.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwaggerJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get an information of a single transaction. Returns the transaction information of the given txid. Works only if the indexer is enabled.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Transaction</returns>
        public Model.Transaction Transaction(string txid)
        {
            ApiResponse<Model.Transaction> localVarResponse = TransactionWithHttpInfo(txid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an information of a single transaction. Returns the transaction information of the given txid. Works only if the indexer is enabled.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse<Model.Transaction> TransactionWithHttpInfo(string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->Transaction");

            var localVarPath = "/v1/transaction/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Model.Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Transaction)));
        }

        /// <summary>
        /// Get an information of a single transaction. Returns the transaction information of the given txid. Works only if the indexer is enabled.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Model.Transaction> TransactionAsync(string txid)
        {
            ApiResponse<Model.Transaction> localVarResponse = await TransactionAsyncWithHttpInfo(txid);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get an information of a single transaction. Returns the transaction information of the given txid. Works only if the indexer is enabled.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model.Transaction>> TransactionAsyncWithHttpInfo(string txid)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->Transaction");

            var localVarPath = "/v1/transaction/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Model.Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Transaction)));
        }

        /// <summary>
        /// Get a specific confirmed transaction. Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to &lt;CurrentProtocol&gt;.MaxTxnLife blocks in the past. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="txid">A transaction id</param>
        /// <returns>Transaction</returns>
        public Model.Transaction TransactionInformation(string address, string txid)
        {
            ApiResponse<Model.Transaction> localVarResponse = TransactionInformationWithHttpInfo(address, txid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific confirmed transaction. Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to &lt;CurrentProtocol&gt;.MaxTxnLife blocks in the past. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="txid">A transaction id</param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse<Model.Transaction> TransactionInformationWithHttpInfo(string address, string txid)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->TransactionInformation");
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->TransactionInformation");

            var localVarPath = "/v1/account/{address}/transaction/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Model.Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Transaction)));
        }

        /// <summary>
        /// Get a specific confirmed transaction. Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to &lt;CurrentProtocol&gt;.MaxTxnLife blocks in the past. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Model.Transaction> TransactionInformationAsync(string address, string txid)
        {
            ApiResponse<Model.Transaction> localVarResponse = await TransactionInformationAsyncWithHttpInfo(address, txid);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific confirmed transaction. Given a wallet address and a transaction id, it returns the confirmed transaction information. This call scans up to &lt;CurrentProtocol&gt;.MaxTxnLife blocks in the past. 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="txid">A transaction id</param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model.Transaction>> TransactionInformationAsyncWithHttpInfo(string address, string txid)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->TransactionInformation");
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->TransactionInformation");

            var localVarPath = "/v1/account/{address}/transaction/{txid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (txid != null) localVarPathParams.Add("txid", this.Configuration.ApiClient.ParameterToString(txid)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model.Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Model.Transaction)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model.Transaction)));
        }

        /// <summary>
        /// Get parameters for constructing a new transaction 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TransactionParams</returns>
        public TransactionParams TransactionParams()
        {
            ApiResponse<TransactionParams> localVarResponse = TransactionParamsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get parameters for constructing a new transaction 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TransactionParams</returns>
        public ApiResponse<TransactionParams> TransactionParamsWithHttpInfo()
        {

            var localVarPath = "/v1/transactions/params";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionParams>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionParams)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionParams)));
        }

        /// <summary>
        /// Get parameters for constructing a new transaction 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TransactionParams</returns>
        public async System.Threading.Tasks.Task<TransactionParams> TransactionParamsAsync()
        {
            ApiResponse<TransactionParams> localVarResponse = await TransactionParamsAsyncWithHttpInfo();
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get parameters for constructing a new transaction 
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TransactionParams)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionParams>> TransactionParamsAsyncWithHttpInfo()
        {

            var localVarPath = "/v1/transactions/params";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionParams>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionParams)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionParams)));
        }

        /// <summary>
        /// Get a list of confirmed transactions. Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="firstRound">Do not fetch any transactions before this round. (optional)</param>
        /// <param name="lastRound">Do not fetch any transactions after this round. (optional)</param>
        /// <param name="fromDate">Do not fetch any transactions before this date. (enabled only with indexer) (optional)</param>
        /// <param name="toDate">Do not fetch any transactions after this date. (enabled only with indexer) (optional)</param>
        /// <param name="max">maximum transactions to show (default to 100) (optional)</param>
        /// <returns>TransactionList</returns>
        public TransactionList Transactions(string address, long? firstRound = null, long? lastRound = null, DateTime? fromDate = null, DateTime? toDate = null, long? max = null)
        {
            ApiResponse<TransactionList> localVarResponse = TransactionsWithHttpInfo(address, firstRound, lastRound, fromDate, toDate, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of confirmed transactions. Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="firstRound">Do not fetch any transactions before this round. (optional)</param>
        /// <param name="lastRound">Do not fetch any transactions after this round. (optional)</param>
        /// <param name="fromDate">Do not fetch any transactions before this date. (enabled only with indexer) (optional)</param>
        /// <param name="toDate">Do not fetch any transactions after this date. (enabled only with indexer) (optional)</param>
        /// <param name="max">maximum transactions to show (default to 100) (optional)</param>
        /// <returns>ApiResponse of TransactionList</returns>
        public ApiResponse<TransactionList> TransactionsWithHttpInfo(string address, long? firstRound = null, long? lastRound = null, DateTime? fromDate = null, DateTime? toDate = null, long? max = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->Transactions");

            var localVarPath = "/v1/account/{address}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (firstRound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstRound", firstRound)); // query parameter
            if (lastRound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastRound", lastRound)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionList)));
        }

        /// <summary>
        /// Get a list of confirmed transactions. Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="firstRound">Do not fetch any transactions before this round. (optional)</param>
        /// <param name="lastRound">Do not fetch any transactions after this round. (optional)</param>
        /// <param name="fromDate">Do not fetch any transactions before this date. (enabled only with indexer) (optional)</param>
        /// <param name="toDate">Do not fetch any transactions after this date. (enabled only with indexer) (optional)</param>
        /// <param name="max">maximum transactions to show (default to 100) (optional)</param>
        /// <returns>Task of TransactionList</returns>
        public async System.Threading.Tasks.Task<TransactionList> TransactionsAsync(string address, long? firstRound = null, long? lastRound = null, DateTime? fromDate = null, DateTime? toDate = null, long? max = null)
        {
            ApiResponse<TransactionList> localVarResponse = await TransactionsAsyncWithHttpInfo(address, firstRound, lastRound, fromDate, toDate, max);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of confirmed transactions. Returns the list of confirmed transactions between within a date range. This call is available only when the indexer is running.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">An account public key</param>
        /// <param name="firstRound">Do not fetch any transactions before this round. (optional)</param>
        /// <param name="lastRound">Do not fetch any transactions after this round. (optional)</param>
        /// <param name="fromDate">Do not fetch any transactions before this date. (enabled only with indexer) (optional)</param>
        /// <param name="toDate">Do not fetch any transactions after this date. (enabled only with indexer) (optional)</param>
        /// <param name="max">maximum transactions to show (default to 100) (optional)</param>
        /// <returns>Task of ApiResponse (TransactionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionList>> TransactionsAsyncWithHttpInfo(string address, long? firstRound = null, long? lastRound = null, DateTime? fromDate = null, DateTime? toDate = null, long? max = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DefaultApi->Transactions");

            var localVarPath = "/v1/account/{address}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (firstRound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstRound", firstRound)); // query parameter
            if (lastRound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastRound", lastRound)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TransactionList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionList)));
        }

        /// <summary>
        /// Gets the node status after waiting for the given round. Waits for a block to appear after round {round} and returns the node&#x27;s status at the time.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>NodeStatus</returns>
        public NodeStatus WaitForBlock(long? round)
        {
            ApiResponse<NodeStatus> localVarResponse = WaitForBlockWithHttpInfo(round);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the node status after waiting for the given round. Waits for a block to appear after round {round} and returns the node&#x27;s status at the time.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>ApiResponse of NodeStatus</returns>
        public ApiResponse<NodeStatus> WaitForBlockWithHttpInfo(long? round)
        {
            // verify the required parameter 'round' is set
            if (round == null)
                throw new ApiException(400, "Missing required parameter 'round' when calling DefaultApi->WaitForBlock");

            var localVarPath = "/v1/status/wait-for-block-after/{round}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (round != null) localVarPathParams.Add("round", this.Configuration.ApiClient.ParameterToString(round)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WaitForBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeStatus)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatus)));
        }

        /// <summary>
        /// Gets the node status after waiting for the given round. Waits for a block to appear after round {round} and returns the node&#x27;s status at the time.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>Task of NodeStatus</returns>
        public async System.Threading.Tasks.Task<NodeStatus> WaitForBlockAsync(long? round)
        {
            ApiResponse<NodeStatus> localVarResponse = await WaitForBlockAsyncWithHttpInfo(round);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the node status after waiting for the given round. Waits for a block to appear after round {round} and returns the node&#x27;s status at the time.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="round">The round to wait until returning status</param>
        /// <returns>Task of ApiResponse (NodeStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeStatus>> WaitForBlockAsyncWithHttpInfo(long? round)
        {
            // verify the required parameter 'round' is set
            if (round == null)
                throw new ApiException(400, "Missing required parameter 'round' when calling DefaultApi->WaitForBlock");

            var localVarPath = "/v1/status/wait-for-block-after/{round}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (round != null) localVarPathParams.Add("round", this.Configuration.ApiClient.ParameterToString(round)); // path parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WaitForBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NodeStatus)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeStatus)));
        }

    }
}
