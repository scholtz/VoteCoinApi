/* 
 * Algod REST API.
 *
 * API Endpoint for AlgoD Operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.Algod.Model
{
    /// <summary>
    /// KeyregTransactionType contains the additional fields for a keyreg Transaction
    /// </summary>
    [DataContract]
        public partial class KeyregTransactionType :  IEquatable<KeyregTransactionType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KeyregTransactionType" /> class.
        /// </summary>
        /// <param name="selkey">SelectionPK is the VRF public key used in key registration transactions.</param>
        /// <param name="votefst">VoteFirst is the first round this participation key is valid.</param>
        /// <param name="votekd">VoteKeyDilution is the dilution for the 2-level participation key.</param>
        /// <param name="votekey">VotePK is the participation public key used in key registration transactions.</param>
        /// <param name="votelst">VoteLast is the last round this participation key is valid.</param>
        public KeyregTransactionType(string selkey = default(string), ulong? votefst = default(ulong?), ulong? votekd = default(ulong?), string votekey = default(string), ulong? votelst = default(ulong?))
        {
            this.Selkey = selkey;
            this.Votefst = votefst;
            this.Votekd = votekd;
            this.Votekey = votekey;
            this.Votelst = votelst;
        }
        
        /// <summary>
        /// SelectionPK is the VRF public key used in key registration transactions
        /// </summary>
        /// <value>SelectionPK is the VRF public key used in key registration transactions</value>
        [DataMember(Name="selkey", EmitDefaultValue=false)]
        public string Selkey { get; set; }

        /// <summary>
        /// VoteFirst is the first round this participation key is valid
        /// </summary>
        /// <value>VoteFirst is the first round this participation key is valid</value>
        [DataMember(Name="votefst", EmitDefaultValue=false)]
        public ulong? Votefst { get; set; }

        /// <summary>
        /// VoteKeyDilution is the dilution for the 2-level participation key
        /// </summary>
        /// <value>VoteKeyDilution is the dilution for the 2-level participation key</value>
        [DataMember(Name="votekd", EmitDefaultValue=false)]
        public ulong? Votekd { get; set; }

        /// <summary>
        /// VotePK is the participation public key used in key registration transactions
        /// </summary>
        /// <value>VotePK is the participation public key used in key registration transactions</value>
        [DataMember(Name="votekey", EmitDefaultValue=false)]
        public string Votekey { get; set; }

        /// <summary>
        /// VoteLast is the last round this participation key is valid
        /// </summary>
        /// <value>VoteLast is the last round this participation key is valid</value>
        [DataMember(Name="votelst", EmitDefaultValue=false)]
        public ulong? Votelst { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeyregTransactionType {\n");
            sb.Append("  Selkey: ").Append(Selkey).Append("\n");
            sb.Append("  Votefst: ").Append(Votefst).Append("\n");
            sb.Append("  Votekd: ").Append(Votekd).Append("\n");
            sb.Append("  Votekey: ").Append(Votekey).Append("\n");
            sb.Append("  Votelst: ").Append(Votelst).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KeyregTransactionType);
        }

        /// <summary>
        /// Returns true if KeyregTransactionType instances are equal
        /// </summary>
        /// <param name="input">Instance of KeyregTransactionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyregTransactionType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Selkey == input.Selkey ||
                    (this.Selkey != null &&
                    this.Selkey.Equals(input.Selkey))
                ) && 
                (
                    this.Votefst == input.Votefst ||
                    (this.Votefst != null &&
                    this.Votefst.Equals(input.Votefst))
                ) && 
                (
                    this.Votekd == input.Votekd ||
                    (this.Votekd != null &&
                    this.Votekd.Equals(input.Votekd))
                ) && 
                (
                    this.Votekey == input.Votekey ||
                    (this.Votekey != null &&
                    this.Votekey.Equals(input.Votekey))
                ) && 
                (
                    this.Votelst == input.Votelst ||
                    (this.Votelst != null &&
                    this.Votelst.Equals(input.Votelst))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Selkey != null)
                    hashCode = hashCode * 59 + this.Selkey.GetHashCode();
                if (this.Votefst != null)
                    hashCode = hashCode * 59 + this.Votefst.GetHashCode();
                if (this.Votekd != null)
                    hashCode = hashCode * 59 + this.Votekd.GetHashCode();
                if (this.Votekey != null)
                    hashCode = hashCode * 59 + this.Votekey.GetHashCode();
                if (this.Votelst != null)
                    hashCode = hashCode * 59 + this.Votelst.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
